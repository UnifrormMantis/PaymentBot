#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –≤–∞—à –±–æ—Ç
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å TRC20 –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
"""

import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from payment_integration import PaymentIntegration
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YourBotWithPayments:
    """
    –í–∞—à –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.payment_system = PaymentIntegration(bot_token)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        self.payment_system.register_payment_callback(
            user_id=0,  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π user_id
            callback=self.on_payment_received
        )
    
    async def on_payment_received(self, user_id: int, amount: float, 
                                currency: str, transaction_hash: str, 
                                wallet_address: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message = (
                f"üéâ –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} {currency}\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_hash}`\n"
                f"üì± –ö–æ—à–µ–ª–µ–∫: `{wallet_address}`\n\n"
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω!"
            )
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.
            await self.process_payment_logic(user_id, amount, currency)
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {amount} {currency}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def process_payment_logic(self, user_id: int, amount: float, currency: str):
        """
        –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        - –ê–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
        - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        - –í—ã–¥–∞—á—É —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –ü—Ä–∏–º–µ—Ä: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
        if amount >= 100:
            await self.activate_premium_subscription(user_id)
        elif amount >= 50:
            await self.activate_standard_subscription(user_id)
        else:
            await self.add_credits(user_id, amount)
    
    async def activate_premium_subscription(self, user_id: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def activate_standard_subscription(self, user_id: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def add_credits(self, user_id: int, amount: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        from database import Database
        db = Database()
        db.add_user(user_id, username, "")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.payment_system.register_payment_callback(
            user_id=user_id,
            callback=self.on_payment_received
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="setup_payments")],
            [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def setup_payments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Tron –∫–æ—à–µ–ª—å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: `TYourAddress1234567890123456789012345`\n\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_wallet_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not wallet_address.startswith('T') or len(wallet_address) != 34:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞!\n\n"
                "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: TYourAddress1234567890123456789012345",
                reply_markup=reply_markup
            )
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂
        result = await self.payment_system.create_auto_payment_request(
            user_id=user_id,
            wallet_address=wallet_address,
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if result['success']:
            await update.message.reply_text(
                f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
                f"ü§ñ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {result['error']}",
                reply_markup=reply_markup
            )
    
    async def check_balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
        user_id = update.effective_user.id
        
        result = await self.payment_system.get_wallet_balance(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if result['success']:
            await update.message.reply_text(
                f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{result['wallet_address']}`\n"
                f"üíµ {result['currency']}: {result['balance']:.2f}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå {result['error']}\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /setup_payments",
                reply_markup=reply_markup
            )
    
    async def payment_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        user_id = update.effective_user.id
        
        result = await self.payment_system.check_payment_status(user_id)
        
        if result['success']:
            confirmed_payments = result['confirmed_payments']
            
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if confirmed_payments:
                message = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
                for payment in confirmed_payments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    message += (
                        f"üí∞ {payment['amount']:.2f} {payment['currency']}\n"
                        f"üîó `{payment['transaction_hash']}`\n"
                        f"üìÖ {payment['confirmed_at']}\n\n"
                    )
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update.message.reply_text("üìä –ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=reply_markup)
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(f"‚ùå {result['error']}", reply_markup=reply_markup)
    
    async def buy_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("ü•â –°—Ç–∞–Ω–¥–∞—Ä—Ç - 50 USDT", callback_data="buy_standard")],
            [InlineKeyboardButton("ü•á –ü—Ä–µ–º–∏—É–º - 100 USDT", callback_data="buy_premium")],
            [InlineKeyboardButton("üíé VIP - 200 USDT", callback_data="buy_vip")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõí –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
            "ü•â –°—Ç–∞–Ω–¥–∞—Ä—Ç - 50 USDT\n"
            "ü•á –ü—Ä–µ–º–∏—É–º - 100 USDT\n"
            "üíé VIP - 200 USDT\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            reply_markup=reply_markup
        )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "setup_payments":
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Tron –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä: `TYourAddress1234567890123456789012345`",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif data == "check_balance":
            result = await self.payment_system.get_wallet_balance(user_id)
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if result['success']:
                await query.edit_message_text(
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {result['balance']:.2f} {result['currency']}\n"
                    f"üì± –ö–æ—à–µ–ª–µ–∫: `{result['wallet_address']}`",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    f"‚ùå {result['error']}",
                    reply_markup=reply_markup
                )
        elif data == "payment_history":
            await self.payment_history_command(update, context)
        elif data == "buy_subscription":
            await self.buy_subscription_command(update, context)
        elif data.startswith("buy_"):
            subscription_type = data.split("_")[1]
            await self.handle_subscription_purchase(query, subscription_type)
        elif data == "main_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="setup_payments")],
                [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    
    async def handle_subscription_purchase(self, query, subscription_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        amount = {"standard": 50, "premium": 100, "vip": 200}[subscription_type]
        
        result = await self.payment_system.create_payment_request(
            user_id=user_id,
            amount=amount,
            currency="USDT",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type.title()}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if result['success']:
            await query.edit_message_text(
                f"üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} USDT\n\n"
                f"üì± –ö–æ—à–µ–ª–µ–∫: `{result['wallet_address']}`\n"
                f"üí∞ –°—É–º–º–∞: {amount} USDT\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result['error']}",
                reply_markup=reply_markup
            )
    
    async def process_payments_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        await self.payment_system.process_payments()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("setup_payments", self.setup_payments_command))
        application.add_handler(CommandHandler("balance", self.check_balance_command))
        application.add_handler(CommandHandler("history", self.payment_history_command))
        application.add_handler(CommandHandler("buy", self.buy_subscription_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤)
        from telegram.ext import MessageHandler, filters
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_wallet_address))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        application.job_queue.run_repeating(
            self.process_payments_task,
            interval=config.CHECK_INTERVAL,
            first=10
        )
        
        print("ü§ñ –ë–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø—É—â–µ–Ω!")
        print("üí≥ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã TRC20 –ø–ª–∞—Ç–µ–∂–∏")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = config.TELEGRAM_BOT_TOKEN
    
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    bot = YourBotWithPayments(BOT_TOKEN)
    bot.run()





