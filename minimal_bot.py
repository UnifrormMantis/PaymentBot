#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TRC20 –ø–ª–∞—Ç–µ–∂–µ–π
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from database import Database
from tron_tracker import TronTracker
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MinimalPaymentBot:
    def __init__(self):
        self.db = Database()
        self.tron_tracker = TronTracker()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(user_id, user.username)
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TRC20 –ø–ª–∞—Ç–µ–∂–µ–π!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDT –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/wallet - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/payment - —Å–æ–∑–¥–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π
/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
/help - –ø–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ /wallet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à Tron –∫–æ—à–µ–ª–µ–∫.
        """
        
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/wallet - –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/payment - –°–æ–∑–¥–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîß –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Tron –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet
2. –°–æ–∑–¥–∞–π—Ç–µ –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π /payment
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
4. –ü—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è

‚ö†Ô∏è –í–∞–∂–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ TRC20 USDT
- –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: 1 USDT
        """
        
        await update.message.reply_text(help_text)
    
    async def wallet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wallet"""
        user_id = update.effective_user.id
        
        if context.args:
            wallet_address = context.args[0]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            if not self.tron_tracker.validate_address(wallet_address):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ Tron –∫–æ—à–µ–ª—å–∫–∞!\n\n"
                    "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                    "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞\n"
                    "‚Ä¢ –ë—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º Tron –∞–¥—Ä–µ—Å–æ–º\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /wallet <–≤–∞—à_–∞–¥—Ä–µ—Å>"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db.add_user(user_id, update.effective_user.username, wallet_address)
            self.db.add_tracked_wallet(wallet_address, user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–ê–¥—Ä–µ—Å: `{wallet_address}`\n"
                f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫.",
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫
            user_data = self.db.get_user(user_id)
            if user_data and user_data.get('wallet_address'):
                await update.message.reply_text(
                    f"üì± –í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:\n\n"
                    f"`{user_data['wallet_address']}`\n\n"
                    f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    f"/wallet <–Ω–æ–≤—ã–π_–∞–¥—Ä–µ—Å>",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "üì± –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/wallet <–≤–∞—à_tron_–∞–¥—Ä–µ—Å>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /wallet TYourTronAddressHere123456789"
                )
    
    async def payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—à–µ–ª–µ–∫
        user_data = self.db.get_user(user_id)
        if not user_data or not user_data.get('wallet_address'):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet"
            )
            return
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /payment <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/payment 100 USDT\n"
                "/payment 50.5 USDT\n\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT"
            )
            return
        
        try:
            amount = float(context.args[0])
            currency = context.args[1].upper()
            
            if amount < 1:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT")
                return
            
            if currency != 'USDT':
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ USDT")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            payment_id = self.db.add_pending_payment(
                user_id, amount, currency, user_data['wallet_address']
            )
            
            await update.message.reply_text(
                f"‚úÖ –û–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"ID: {payment_id}\n"
                f"–°—É–º–º–∞: {amount} {currency}\n"
                f"–ö–æ—à–µ–ª–µ–∫: `{user_data['wallet_address']}`\n\n"
                f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n"
                f"–ü—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ {amount} {currency} –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
                parse_mode='Markdown'
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        user_data = self.db.get_user(user_id)
        if not user_data or not user_data.get('wallet_address'):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet")
            return
        
        pending_payments = self.db.get_pending_payments(user_data['wallet_address'])
        
        if not pending_payments:
            await update.message.reply_text(
                "üìä –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π /payment"
            )
            return
        
        status_text = "üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
        
        for payment in pending_payments:
            status_text += f"üîÑ ID: {payment['id']}\n"
            status_text += f"üí∞ –°—É–º–º–∞: {payment['amount']} {payment['currency']}\n"
            status_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {payment['created_at']}\n"
            status_text += f"üì± –ö–æ—à–µ–ª–µ–∫: `{payment['wallet_address']}`\n\n"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        user_id = update.effective_user.id
        
        user_data = self.db.get_user(user_id)
        if not user_data or not user_data.get('wallet_address'):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet")
            return
        
        wallet_address = user_data['wallet_address']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = self.tron_tracker.get_account_info(wallet_address)
        
        if account_info:
            balance = self.tron_tracker.get_balance(wallet_address)
            
            await update.message.reply_text(
                f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"–ê–¥—Ä–µ—Å: `{wallet_address}`\n"
                f"USDT: {balance:.6f}\n\n"
                f"*–ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ")
    
    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        user_id = update.effective_user.id
        
        user_data = self.db.get_user(user_id)
        if not user_data or not user_data.get('wallet_address'):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet")
            return
        
        wallet_address = user_data['wallet_address']
        
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            new_transfers = self.tron_tracker.check_new_transactions(wallet_address)
            
            if not new_transfers:
                await update.message.reply_text("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            pending_payments = self.db.get_pending_payments(wallet_address)
            confirmed_count = 0
            
            for transfer in new_transfers:
                for payment in pending_payments:
                    if (abs(transfer['amount'] - payment['amount']) < 0.01 and 
                        payment['status'] == 'pending'):
                        
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                        self.db.confirm_payment(
                            user_id, 
                            payment['amount'], 
                            payment['currency'],
                            transfer['tx_hash'],
                            wallet_address
                        )
                        
                        confirmed_count += 1
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await update.message.reply_text(
                            f"üéâ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                            f"üí∞ –°—É–º–º–∞: {payment['amount']} {payment['currency']}\n"
                            f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transfer['tx_hash']}`\n"
                            f"üì± –ö–æ—à–µ–ª–µ–∫: `{wallet_address}`\n\n"
                            f"–ü–ª–∞—Ç–µ–∂ ID: {payment['id']}",
                            parse_mode='Markdown'
                        )
                        break
            
            if confirmed_count == 0:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(new_transfers)} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –Ω–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {confirmed_count}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not config.TELEGRAM_BOT_TOKEN:
            print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("wallet", self.wallet_command))
        application.add_handler(CommandHandler("payment", self.payment_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("balance", self.balance_command))
        application.add_handler(CommandHandler("check", self.check_command))
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –ö–æ–º–∞–Ω–¥—ã:")
        print("   /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
        print("   /wallet - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        print("   /payment - —Å–æ–∑–¥–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂")
        print("   /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print("   /status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π")
        print("   /balance - –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞")
        print("   /help - —Å–ø—Ä–∞–≤–∫–∞")
        print("\n‚ö†Ô∏è  –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == "__main__":
    bot = MinimalPaymentBot()
    bot.run()

