#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Telegram –±–æ—Ç–∞
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
"""

import os
import sys
import time
import signal
import psutil
import subprocess
import hashlib
import json
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

class ProcessManager:
    def __init__(self, bot_name: str = "telegram_bot"):
        self.bot_name = bot_name
        self.process_patterns = [
            "main.py",
            "minimal_bot.py", 
            "basic_bot.py",
            "simple_bot.py",
            "legacy_bot.py",
            "telegram_bot.py",
            "private_bot.py",
            "auto_payment_bot.py"
        ]
        self.current_bot_file = "private_bot.py"  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
        self.version_file = "bot_version.json"  # –§–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π
    
    def find_bot_processes(self) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
        bot_processes = []
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
                try:
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–æ–º
                    for pattern in self.process_patterns:
                        if pattern in cmdline and 'python' in cmdline.lower():
                            bot_processes.append({
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cmdline': cmdline,
                                'create_time': proc.info['create_time'],
                                'pattern': pattern
                            })
                            break
                            
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            
        return bot_processes
    
    def get_process_info(self, pid: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ PID"""
        try:
            proc = psutil.Process(pid)
            return {
                'pid': pid,
                'name': proc.name(),
                'cmdline': ' '.join(proc.cmdline()),
                'create_time': proc.create_time(),
                'status': proc.status(),
                'memory_info': proc.memory_info(),
                'cpu_percent': proc.cpu_percent()
            }
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            return None
    
    def stop_process(self, pid: int, force: bool = False) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID"""
        try:
            proc = psutil.Process(pid)
            
            if force:
                proc.kill()
                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                proc.terminate()
                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            try:
                proc.wait(timeout=5)
                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return True
            except psutil.TimeoutExpired:
                if not force:
                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    proc.kill()
                    proc.wait(timeout=2)
                    return True
                return False
                
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")
            return False
    
    def stop_all_bot_processes(self, force: bool = False) -> int:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
        processes = self.find_bot_processes()
        stopped_count = 0
        
        if not processes:
            print("‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0
        
        print(f"üõë –ù–∞–π–¥–µ–Ω–æ {len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞:")
        for proc in processes:
            print(f"   PID: {proc['pid']}, –ö–æ–º–∞–Ω–¥–∞: {proc['cmdline']}")
        
        print(f"\n{'–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ' if force else '–ú—è–≥–∫–æ–µ'} –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        for proc in processes:
            if self.stop_process(proc['pid'], force):
                stopped_count += 1
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è–º–∏
        
        if stopped_count > 0:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {stopped_count} –∏–∑ {len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            time.sleep(2)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        return stopped_count
    
    def wait_for_processes_to_stop(self, timeout: int = 10) -> bool:
        """–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            processes = self.find_bot_processes()
            if not processes:
                return True
            time.sleep(1)
        
        return False
    
    def check_conflict(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        processes = self.find_bot_processes()
        return len(processes) > 1
    
    def get_running_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
        return len(self.find_bot_processes())
    
    def print_status(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        processes = self.find_bot_processes()
        
        if not processes:
            print("‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞:")
        print("-" * 80)
        
        for i, proc in enumerate(processes, 1):
            try:
                proc_info = self.get_process_info(proc['pid'])
                if proc_info:
                    print(f"{i}. PID: {proc_info['pid']}")
                    print(f"   –ö–æ–º–∞–Ω–¥–∞: {proc_info['cmdline']}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {proc_info['status']}")
                    print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.ctime(proc_info['create_time'])}")
                    print(f"   –ü–∞–º—è—Ç—å: {proc_info['memory_info'].rss / 1024 / 1024:.1f} MB")
                    print()
            except Exception as e:
                print(f"{i}. PID: {proc['pid']} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e})")
    
    def cleanup_orphaned_processes(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        processes = self.find_bot_processes()
        current_time = time.time()
        orphaned_count = 0
        
        for proc in processes:
            try:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                if current_time - proc['create_time'] > 3600:
                    proc_info = self.get_process_info(proc['pid'])
                    if proc_info and proc_info['status'] in ['zombie', 'stopped']:
                        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc['pid']}")
                        self.stop_process(proc['pid'], force=True)
                        orphaned_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc['pid']}: {e}")
        
        if orphaned_count > 0:
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {orphaned_count} –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    def ensure_single_instance(self) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        processes = self.find_bot_processes()
        
        if len(processes) == 0:
            print("‚ÑπÔ∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        if len(processes) == 1:
            print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {processes[0]['pid']})")
            return True
        
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(processes)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã...")
        
        stopped = self.stop_all_bot_processes()
        
        if stopped > 0:
            print("‚è≥ –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            if self.wait_for_processes_to_stop():
                print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                return True
            else:
                print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                self.stop_all_bot_processes(force=True)
                return True
        
        return False
    
    def get_file_hash(self, file_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            if not os.path.exists(file_path):
                return None
            
            with open(file_path, 'rb') as f:
                content = f.read()
                return hashlib.md5(content).hexdigest()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    def get_current_version(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞"""
        version_info = {
            "bot_file": self.current_bot_file,
            "file_hash": self.get_file_hash(self.current_bot_file),
            "timestamp": time.time(),
            "version": "1.1.0"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª
        try:
            with open(self.version_file, 'w') as f:
                json.dump(version_info, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        
        return version_info
    
    def check_bot_actuality(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        result = {
            "is_actual": False,
            "current_file": None,
            "expected_file": self.current_bot_file,
            "file_changed": False,
            "processes": [],
            "recommendations": []
        }
        
        processes = self.find_bot_processes()
        result["processes"] = processes
        
        if not processes:
            result["recommendations"].append("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω
        running_files = set()
        for proc in processes:
            cmdline = proc.get('cmdline', '')
            for pattern in self.process_patterns:
                if pattern in cmdline:
                    running_files.add(pattern)
                    break
        
        result["current_file"] = list(running_files)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if self.current_bot_file in running_files:
            result["is_actual"] = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞
            current_hash = self.get_file_hash(self.current_bot_file)
            if current_hash:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                oldest_start = min(proc['create_time'] for proc in processes)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                file_mtime = os.path.getmtime(self.current_bot_file)
                if file_mtime > oldest_start:
                    result["file_changed"] = True
                    result["is_actual"] = False
                    result["recommendations"].append("–§–∞–π–ª –±–æ—Ç–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
        else:
            result["recommendations"].append(f"–ó–∞–ø—É—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {running_files}")
            result["recommendations"].append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {self.current_bot_file}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if len(processes) > 1:
            result["recommendations"].append("–ó–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
            result["is_actual"] = False
        
        return result
    
    def restart_if_outdated(self, force: bool = False) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª"""
        actuality = self.check_bot_actuality()
        
        if actuality["is_actual"] and not actuality["file_changed"]:
            print("‚úÖ –ë–æ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞:")
        for rec in actuality["recommendations"]:
            print(f"   ‚Ä¢ {rec}")
        
        if not force:
            print("\nüîÑ –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./start_private_bot.sh")
            return False
        
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        stopped = self.stop_all_bot_processes(force=True)
        
        if stopped > 0:
            print("‚è≥ –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            if self.wait_for_processes_to_stop():
                print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π: ./start_private_bot.sh")
                return True
            else:
                print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                return False
        
        return False
    
    def get_actuality_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
        actuality = self.check_bot_actuality()
        
        if actuality["is_actual"] and not actuality["file_changed"]:
            return "‚úÖ –ê–∫—Ç—É–∞–ª–µ–Ω"
        elif actuality["file_changed"]:
            return "‚ö†Ô∏è  –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω"
        elif actuality["current_file"] and self.current_bot_file not in actuality["current_file"]:
            return "‚ùå –£—Å—Ç–∞—Ä–µ–ª"
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def print_actuality_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
        actuality = self.check_bot_actuality()
        
        print("üîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –ë–û–¢–ê")
        print("=" * 50)
        
        print(f"üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: {actuality['expected_file']}")
        print(f"üîÑ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(actuality['current_file']) if actuality['current_file'] else '–ù–µ—Ç'}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(actuality['processes'])}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {self.get_actuality_status()}")
        
        if actuality["file_changed"]:
            print("‚ö†Ô∏è  –§–∞–π–ª –±–æ—Ç–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞!")
        
        if actuality["recommendations"]:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, rec in enumerate(actuality["recommendations"], 1):
                print(f"   {i}. {rec}")
        
        print("\nüìã –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        if actuality["processes"]:
            for i, proc in enumerate(actuality["processes"], 1):
                print(f"   {i}. PID: {proc['pid']} - {proc['cmdline']}")
        else:
            print("   –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    manager = ProcessManager()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞...")
    manager.print_status()
    
    print("\nüõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã...")
    if manager.check_conflict():
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        manager.ensure_single_instance()
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print("\n" + "="*60)
    manager.print_actuality_report()
    
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
    actuality = manager.check_bot_actuality()
    if not actuality["is_actual"] or actuality["file_changed"]:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start_private_bot.sh")
    else:
        print("‚úÖ –ë–æ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

if __name__ == "__main__":
    main()
