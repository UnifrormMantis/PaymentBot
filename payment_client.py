#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Payment Bot API
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –≤ –ª—é–±–æ–π –±–æ—Ç
"""

import aiohttp
import asyncio
import logging
from typing import Optional, Dict, Any
import json

logger = logging.getLogger(__name__)

class PaymentClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Payment Bot API
    """
    
    def __init__(self, api_url: str = "http://localhost:8000"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_url: URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.api_url = api_url.rstrip('/')
        self.session = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥
            endpoint: Endpoint API
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API
        """
        if not self.session:
            raise RuntimeError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async with")
        
        url = f"{self.api_url}{endpoint}"
        
        try:
            if method.upper() == "GET":
                async with self.session.get(url) as response:
                    result = await response.json()
            elif method.upper() == "POST":
                async with self.session.post(url, json=data) as response:
                    result = await response.json()
            elif method.upper() == "DELETE":
                async with self.session.delete(url) as response:
                    result = await response.json()
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            if response.status >= 400:
                raise Exception(f"HTTP {response.status}: {result.get('detail', 'Unknown error')}")
            
            return result
            
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            raise
    
    async def create_payment(self, user_id: int, amount: float, 
                           currency: str = "USDT", description: Optional[str] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        """
        data = {
            "user_id": user_id,
            "amount": amount,
            "currency": currency,
            "description": description
        }
        
        return await self._make_request("POST", "/payment/create", data)
    
    async def setup_auto_payment(self, user_id: int, wallet_address: str, 
                               description: Optional[str] = None) -> Dict[str, Any]:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        data = {
            "user_id": user_id,
            "wallet_address": wallet_address,
            "description": description
        }
        
        return await self._make_request("POST", "/payment/auto", data)
    
    async def get_payment_status(self, user_id: int, payment_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π
        """
        endpoint = f"/payment/status/{user_id}"
        if payment_id:
            endpoint += f"?payment_id={payment_id}"
        
        return await self._make_request("GET", endpoint)
    
    async def get_wallet_balance(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        """
        return await self._make_request("GET", f"/payment/balance/{user_id}")
    
    async def register_callback(self, user_id: int, callback_url: str) -> Dict[str, Any]:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback_url: URL –¥–ª—è callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback
        """
        data = {"callback_url": callback_url}
        return await self._make_request("POST", f"/payment/callback/{user_id}", data)
    
    async def unregister_callback(self, user_id: int) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback
        """
        return await self._make_request("DELETE", f"/payment/callback/{user_id}")
    
    async def get_callbacks(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback'–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ callback'–æ–≤
        """
        return await self._make_request("GET", "/payment/callbacks")
    
    async def get_payment_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        """
        return await self._make_request("GET", "/payment/info")
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
        
        Returns:
            –°—Ç–∞—Ç—É—Å API
        """
        return await self._make_request("GET", "/health")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class YourBotWithPaymentAPI:
    """
    –ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ API
    """
    
    def __init__(self, api_url: str = "http://localhost:8000"):
        self.api_url = api_url
        self.payment_client = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.payment_client = PaymentClient(self.api_url)
        print("ü§ñ –ë–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø—É—â–µ–Ω!")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.payment_client:
            await self.payment_client.__aexit__(None, None, None)
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def create_payment_for_user(self, user_id: int, amount: float, description: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with PaymentClient(self.api_url) as client:
            try:
                result = await client.create_payment(
                    user_id=user_id,
                    amount=amount,
                    currency="USDT",
                    description=description
                )
                
                if result['success']:
                    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {amount} USDT")
                    return result['data']
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result['error']}")
                    return None
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                return None
    
    async def setup_auto_payment_for_user(self, user_id: int, wallet_address: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with PaymentClient(self.api_url) as client:
            try:
                result = await client.setup_auto_payment(
                    user_id=user_id,
                    wallet_address=wallet_address,
                    description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂"
                )
                
                if result['success']:
                    print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return result['data']
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {result['error']}")
                    return None
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                return None
    
    async def check_user_balance(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with PaymentClient(self.api_url) as client:
            try:
                result = await client.get_wallet_balance(user_id)
                
                if result['success']:
                    print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result['balance']} {result['currency']}")
                    return result
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result['error']}")
                    return None
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                return None
    
    async def get_user_payments(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with PaymentClient(self.api_url) as client:
            try:
                result = await client.get_payment_status(user_id)
                
                if result['success']:
                    data = result['data']
                    print(f"üìä –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
                    print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö: {len(data['pending_payments'])}")
                    print(f"   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {len(data['confirmed_payments'])}")
                    return data
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {result['error']}")
                    return None
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAYMENT CLIENT")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = YourBotWithPaymentAPI("http://localhost:8000")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 12345
        test_wallet = "TTestWallet1234567890123456789012345"
        test_amount = 100.0
        
        print("\nüß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
        await bot.create_payment_for_user(test_user_id, test_amount, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")
        
        print("\nüß™ –¢–ï–°–¢ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
        await bot.setup_auto_payment_for_user(test_user_id, test_wallet)
        
        print("\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
        await bot.check_user_balance(test_user_id)
        
        print("\nüß™ –¢–ï–°–¢ 4: –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        await bot.get_user_payments(test_user_id)
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())





