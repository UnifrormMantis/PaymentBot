#!/usr/bin/env python3
"""
–ü—Ä–∏–≤–∞—Ç–Ω—ã–π Telegram Bot –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TRC20 –ø–ª–∞—Ç–µ–∂–µ–π
–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import Database
from tron_tracker import TronTracker
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PrivatePaymentBot:
    def __init__(self):
        self.db = Database()
        self.tron_tracker = TronTracker()
        self.application = None
        
        # Whitelist –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        self.allowed_users = set()
        self.load_allowed_users()
    
    def load_allowed_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
            cursor.execute('SELECT user_id FROM users')
            users = cursor.fetchall()
            
            for (user_id,) in users:
                self.allowed_users.add(user_id)
            
            conn.close()
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.allowed_users)} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def is_user_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"""
        return user_id in self.allowed_users
    
    def add_user_to_whitelist(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist"""
        try:
            self.allowed_users.add(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist: {e}")
            return False
    
    def remove_user_from_whitelist(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist"""
        try:
            if user_id in self.allowed_users:
                self.allowed_users.remove(user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ whitelist")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist: {e}")
            return False
    
    async def check_access(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text(
                "üö´ **–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "üîí –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return False
        
        return True
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not await self.check_access(update, context):
            return
        
        user = update.effective_user
        user_id = user.id
        username = user.username
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        existing_user = self.db.get_user(user_id)
        if not existing_user:
            self.db.add_user(user_id, username, "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ—à–µ–ª—å–∫–æ–≤
        active_wallet = self.db.get_active_wallet(user_id)
        user_wallets = self.db.get_user_wallets(user_id)
        
        wallet_info = ""
        if active_wallet:
            wallet_info = f"\nüí≥ **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** `{active_wallet['wallet_address']}`"
            wallet_info += f"\nüì± **–ù–∞–∑–≤–∞–Ω–∏–µ:** {active_wallet['wallet_name']}"
            wallet_info += f"\nüìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)}"
        elif user_wallets:
            wallet_info = f"\nüí≥ **–ö–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)} (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)"
        else:
            wallet_info = "\nüí≥ **–ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã** - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        
        welcome_text = f"""
ü§ñ **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω** - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
{wallet_info}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="check_status")])
        keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="check_balance")])
        keyboard.append([InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ", callback_data="auto_mode")])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏
        if user_wallets:
            keyboard.append([InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")])
        else:
            keyboard.append([InlineKeyboardButton("üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", callback_data="get_api_key")])
        keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not await self.check_access(update, context):
            return
        
        help_text = """
üìö **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ üîë API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"
2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", callback_data="get_api_key")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def wallet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wallet - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
        if not await self.check_access(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
        if context.args:
            wallet_address = context.args[0].strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            if not wallet_address.startswith('T') or len(wallet_address) != 34:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                    "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                    "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `TYourAddress1234567890123456789012345`",
                    parse_mode='Markdown'
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
            self.db.add_user_wallet(user_id, wallet_address)
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{wallet_address}`\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await self.show_wallet_management(update, context)
    
    async def show_wallet_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
        user_id = update.effective_user.id
        wallets = self.db.get_user_wallets(user_id)
        
        if not wallets:
            wallet_text = """
üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏**

üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤**

**–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:**
`/wallet <–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞>`

**–ü—Ä–∏–º–µ—Ä:**
`/wallet TYourAddress1234567890123456789012345`

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'
‚Ä¢ –î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞: 34 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –¢–æ–ª—å–∫–æ TRC20 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–¥—Ä–µ—Å–∞
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            wallet_text = f"""
üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏**

üìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(wallets)}

**–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:**
            """
            
            keyboard = []
            for wallet in wallets:
                status = "üü¢ –ê–ö–¢–ò–í–ù–´–ô" if wallet['is_active'] else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
                button_text = f"{status} {wallet['wallet_name']}"
                callback_data = f"wallet_{wallet['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(wallet_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(wallet_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def auto_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        if not await self.check_access(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        user_data = self.db.get_user(user_id)
        current_auto_mode = user_data.get('auto_mode', False)
        new_auto_mode = not current_auto_mode
        self.db.update_user_auto_mode(user_id, new_auto_mode)

        status = "–í–ö–õ–Æ–ß–ï–ù" if new_auto_mode else "–í–´–ö–õ–Æ–ß–ï–ù"
        status_emoji = "‚úÖ" if new_auto_mode else "‚ùå"
        
        auto_text = f"""
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º {status}!**

üì± **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** {active_wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{active_wallet['wallet_address']}`

**–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
‚Ä¢ {'–õ—é–±–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω' if new_auto_mode else '–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
‚Ä¢ {'–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞' if new_auto_mode else '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'}
‚Ä¢ {'–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö' if new_auto_mode else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="auto_mode")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(auto_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        if not await self.check_access(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        user_wallets = self.db.get_user_wallets(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        wallet_address = active_wallet['wallet_address']
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        pending_payments = self.db.get_pending_payments(wallet_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT amount, currency, transaction_hash, confirmed_at
            FROM confirmed_payments 
            WHERE user_id = ?
            ORDER BY confirmed_at DESC
            LIMIT 10
        ''', (user_id,))
        confirmed_payments = cursor.fetchall()
        conn.close()
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π**

üì± **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** {active_wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{wallet_address}`
üìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)}

‚è≥ **–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:** {len(pending_payments)}
‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:** {len(confirmed_payments)}
        """
        
        if pending_payments:
            status_text += "\n\n**–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n"
            for payment in pending_payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_text += f"üí∞ {payment['amount']} {payment['currency']}\n"
        
        if confirmed_payments:
            status_text += "\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**\n"
            for payment in confirmed_payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_text += f"üí∞ {payment[0]} {payment[1]}\n"
                status_text += f"üîó `{payment[2]}`\n"
                status_text += f"üìÖ {payment[3]}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        if not await self.check_access(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        wallet_address = active_wallet['wallet_address']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            balance = self.tron_tracker.get_usdt_balance(wallet_address)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üí∞ **–ë–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞**\n\n"
                f"üì± **–ù–∞–∑–≤–∞–Ω–∏–µ:** {active_wallet['wallet_name']}\n"
                f"üè¶ **–ê–¥—Ä–µ—Å:** `{wallet_address}`\n"
                f"üíµ **USDT:** {balance:.2f}\n\n"
                f"*–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_balance")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def check_payments_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º
            cursor.execute("SELECT user_id, wallet_address FROM users WHERE auto_mode = 1")
            users_in_auto_mode = cursor.fetchall()
            conn.close()

            for user_id, wallet_address in users_in_auto_mode:
                if not wallet_address:
                    continue

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    new_transfers = self.tron_tracker.get_new_transfers(wallet_address)
                    
                    for transfer in new_transfers:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                        if not self.db.is_transaction_confirmed(transfer['tx_hash']):
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ª—é–±–æ–π –ø–ª–∞—Ç–µ–∂
                            self.db.confirm_payment(
                                user_id, 
                                transfer['amount'], 
                                transfer['currency'],
                                transfer['tx_hash'],
                                wallet_address
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            try:
                                await context.bot.send_message(
                                    chat_id=user_id,
                                    text=f"üéâ **–ü–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂!**\n\n"
                                         f"üí∞ **–°—É–º–º–∞:** {transfer['amount']} {transfer['currency']}\n"
                                         f"üîó **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:** `{transfer['tx_hash']}`\n"
                                         f"üì± **–ö–æ—à–µ–ª–µ–∫:** `{wallet_address}`\n\n"
                                         f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω!**",
                                    parse_mode='Markdown'
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ: {e}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    async def admin_add_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id not in [8489431460]:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_add_user 123456789"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            if self.add_user_to_whitelist(target_user_id):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}."
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def admin_remove_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id not in [8489431460]:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_remove_user 123456789"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            if self.remove_user_from_whitelist(target_user_id):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ whitelist."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ whitelist."
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def admin_list_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id not in [8489431460]:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        users_list = list(self.allowed_users)
        users_text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ whitelist ({len(users_list)}):**\n\n"
        
        for i, user_id in enumerate(users_list, 1):
            users_text += f"{i}. `{user_id}`\n"
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
    
    async def api_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not await self.check_access(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
        keyboard = [
            [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", callback_data="get_api_key")],
            [InlineKeyboardButton("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="api_docs")],
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã", callback_data="api_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        api_info = f"""
üîó **API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞**

üöÄ **–ü–†–û–°–¢–û–ô API (–∫–∞–∫ —É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–æ—Ç–æ–≤):**
‚Ä¢ –û–¥–∏–Ω API –∫–ª—é—á - –∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ Callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —è–∑—ã–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

üåê **–ë–∞–∑–æ–≤—ã–π URL:** `http://localhost:8001`

üì° **–û—Å–Ω–æ–≤–Ω—ã–µ endpoints:**
‚Ä¢ `GET /get-api-key` - –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á
‚Ä¢ `POST /create-payment` - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
‚Ä¢ `GET /check-payment/{{id}}` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ `GET /health` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è

üéØ **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞!**
        """
        
        await update.message.reply_text(api_info, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def get_api_key_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ API
            import requests
            response = requests.get("http://localhost:8001/get-api-key", timeout=10)
            
            if response.status_code == 200:
                api_data = response.json()
                api_key = api_data['api_key']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                conn = self.db.get_connection()
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è API –∫–ª—é—á–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS user_api_keys (
                        user_id INTEGER PRIMARY KEY,
                        api_key TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT OR REPLACE INTO user_api_keys (user_id, api_key)
                    VALUES (?, ?)
                ''', (user_id, api_key))
                
                conn.commit()
                conn.close()
                
                api_key_info = f"""
üîë **–í–ê–® API –ö–õ–Æ–ß:**

```
{api_key}
```

üåê **–ë–∞–∑–æ–≤—ã–π URL:** `http://localhost:8001`

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

**–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂:**
```bash
curl -X POST http://localhost:8001/create-payment \\
     -H "X-API-Key: {api_key}" \\
     -H "Content-Type: application/json" \\
     -d '{{"amount": 100.0, "currency": "USDT"}}'
```

**Python:**
```python
from simple_client import SimplePaymentClient

client = SimplePaymentClient("{api_key}")
result = client.create_payment(100.0, "USDT")
```

**JavaScript:**
```javascript
const response = await fetch('http://localhost:8001/create-payment', {{
    method: 'POST',
    headers: {{
        'X-API-Key': '{api_key}',
        'Content-Type': 'application/json'
    }},
    body: JSON.stringify({{amount: 100.0, currency: 'USDT'}})
}});
```

üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** http://localhost:8001/docs

‚ö†Ô∏è **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!**
                """
                
                await query.edit_message_text(api_key_info, parse_mode='Markdown')
                
            else:
                await query.edit_message_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞**\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Simple API –∑–∞–ø—É—â–µ–Ω:\n"
                    "```bash\n./start_simple_api.sh\n```",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Simple API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001",
                parse_mode='Markdown'
            )
    
    async def api_docs_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API"""
        query = update.callback_query
        await query.answer()
        
        docs_info = """
üìö **–î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø API**

üåê **Swagger UI:** http://localhost:8001/docs

üì° **Endpoints:**
‚Ä¢ `GET /get-api-key` - –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á
‚Ä¢ `POST /create-payment` - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
‚Ä¢ `GET /check-payment/{id}` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ `GET /health` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è

üîë **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
–ó–∞–≥–æ–ª–æ–≤–æ–∫: `X-API-Key: your_api_key`

üìñ **–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:** `SIMPLE_API_GUIDE.md`
        """
        
        await query.edit_message_text(docs_info, parse_mode='Markdown')
    
    async def api_examples_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        query = update.callback_query
        await query.answer()
        
        examples_info = """
üí° **–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø**

**1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:**
```bash
curl http://localhost:8001/get-api-key
```

**2. –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂:**
```bash
curl -X POST http://localhost:8001/create-payment \\
     -H "X-API-Key: your_api_key" \\
     -H "Content-Type: application/json" \\
     -d '{"amount": 100.0, "currency": "USDT"}'
```

**3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:**
```bash
curl -H "X-API-Key: your_api_key" \\
     http://localhost:8001/check-payment/payment_id
```

**Python –∫–ª–∏–µ–Ω—Ç:**
```python
from simple_client import SimplePaymentClient

client = SimplePaymentClient("your_api_key")
result = client.create_payment(100.0, "USDT")
```

**JavaScript:**
```javascript
const response = await fetch('http://localhost:8001/create-payment', {
    method: 'POST',
    headers: {
        'X-API-Key': 'your_api_key',
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({amount: 100.0, currency: 'USDT'})
});
```
        """
        
        await query.edit_message_text(examples_info, parse_mode='Markdown')
    
    async def add_wallet_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        context.user_data['waiting_for_wallet'] = True
        
        wallet_text = """
üí≥ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Tron –∫–æ—à–µ–ª—å–∫–∞:

‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T'
‚Ä¢ –î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞: 34 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –¢–æ–ª—å–∫–æ TRC20 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–¥—Ä–µ—Å–∞

–ü—Ä–∏–º–µ—Ä: `TYourTronWalletAddress1234567890123456789012345`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.
        """
        
        await query.edit_message_text(wallet_text, parse_mode='Markdown')
    
    async def check_status_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        user_wallets = self.db.get_user_wallets(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        wallet_address = active_wallet['wallet_address']
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        pending_payments = self.db.get_pending_payments(wallet_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT amount, currency, transaction_hash, confirmed_at
            FROM confirmed_payments 
            WHERE user_id = ?
            ORDER BY confirmed_at DESC
            LIMIT 10
        ''', (user_id,))
        confirmed_payments = cursor.fetchall()
        conn.close()
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π**

üì± **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** {active_wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{wallet_address}`
üìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)}

‚è≥ **–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:** {len(pending_payments)}
‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:** {len(confirmed_payments)}
        """
        
        if pending_payments:
            status_text += "\n\n**–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n"
            for payment in pending_payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_text += f"üí∞ {payment['amount']} {payment['currency']}\n"
        
        if confirmed_payments:
            status_text += "\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**\n"
            for payment in confirmed_payments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_text += f"üí∞ {payment[0]} {payment[1]}\n"
                status_text += f"üîó `{payment[2]}`\n"
                status_text += f"üìÖ {payment[3]}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def check_balance_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        wallet_address = active_wallet['wallet_address']
        
        try:
            balance = self.tron_tracker.get_usdt_balance(wallet_address)
            balance_text = f"""
üí∞ **–ë–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞**

üì± **–ù–∞–∑–≤–∞–Ω–∏–µ:** {active_wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{wallet_address}`
üíµ **USDT:** {balance:.2f}

*–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(balance_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_balance")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def show_help_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        help_text = """
üìö **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ üîë API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"
2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", callback_data="get_api_key")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_wallet_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        if not await self.check_access(update, context):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        if not context.user_data.get('waiting_for_wallet', False):
            return
        
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
        if wallet_address.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
            context.user_data['waiting_for_wallet'] = False
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not self.tron_tracker.validate_address(wallet_address):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ê–¥—Ä–µ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'T'\n"
                "‚Ä¢ –î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞: 34 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –≠—Ç–æ Tron –∞–¥—Ä–µ—Å\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ—à–µ–ª—å–∫–æ–≤
            self.db.add_user_wallet(user_id, wallet_address)
            context.user_data['waiting_for_wallet'] = False
            
            success_text = f"""
‚úÖ **–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**

üè¶ –ê–¥—Ä–µ—Å: `{wallet_address}`

ü§ñ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
2. –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫
            """
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            context.user_data['waiting_for_wallet'] = False
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="add_wallet")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:** {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def wallet_management_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"
        if query.data == "wallet_management":
            await self.show_wallet_management(update, context)
            return
        
        # –ü–∞—Ä—Å–∏–º ID –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ callback_data
        wallet_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
        wallets = self.db.get_user_wallets(user_id)
        wallet = None
        for w in wallets:
            if w['id'] == wallet_id:
                wallet = w
                break
        
        if not wallet:
            await query.edit_message_text("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        wallet_text = f"""
üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º**

üì± **–ù–∞–∑–≤–∞–Ω–∏–µ:** {wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{wallet['wallet_address']}`
üü¢ **–°—Ç–∞—Ç—É—Å:** {'–ê–ö–¢–ò–í–ù–´–ô' if wallet['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
üìÖ **–î–æ–±–∞–≤–ª–µ–Ω:** {wallet['created_at']}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        keyboard = []
        if not wallet['is_active']:
            keyboard.append([InlineKeyboardButton("üü¢ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data=f"wallet_action_activate_{wallet_id}")])
        
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data=f"wallet_action_delete_{wallet_id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="wallet_back")])
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(wallet_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def wallet_action_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        try:
            user_id = query.from_user.id
            parts = query.data.split('_')
            if len(parts) < 4:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
                return
            
            action = parts[2]
            wallet_id = int(parts[3])
        
            if action == "activate":
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
                self.db.set_active_wallet(user_id, wallet_id)
                await query.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
                # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await self.show_wallet_management(update, context)
                
            elif action == "delete":
                # –£–¥–∞–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
                self.db.delete_user_wallet(user_id, wallet_id)
                await query.answer("üóëÔ∏è –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!", show_alert=False)
                # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await self.show_wallet_management(update, context)
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=False)
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è wallet_id={wallet_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wallet_action_callback: {e}, callback_data: {query.data}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
    
    async def wallet_back_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        try:
            await self.show_wallet_management(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wallet_back_callback: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback
            await self.show_main_menu_callback(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu_callback: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    async def show_main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        user = query.from_user
        user_id = user.id
        username = user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ—à–µ–ª—å–∫–æ–≤
        active_wallet = self.db.get_active_wallet(user_id)
        user_wallets = self.db.get_user_wallets(user_id)
        
        wallet_info = ""
        if active_wallet:
            wallet_info = f"\nüí≥ **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** `{active_wallet['wallet_address']}`"
            wallet_info += f"\nüì± **–ù–∞–∑–≤–∞–Ω–∏–µ:** {active_wallet['wallet_name']}"
            wallet_info += f"\nüìä **–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)}"
        elif user_wallets:
            wallet_info = f"\nüí≥ **–ö–æ—à–µ–ª—å–∫–æ–≤:** {len(user_wallets)} (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)"
        else:
            wallet_info = "\nüí≥ **–ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã** - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        
        welcome_text = f"""
ü§ñ **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω** - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
{wallet_info}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="check_status")])
        keyboard.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="check_balance")])
        keyboard.append([InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ", callback_data="auto_mode")])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏
        if user_wallets:
            keyboard.append([InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")])
        else:
            keyboard.append([InlineKeyboardButton("üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", callback_data="get_api_key")])
        keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def auto_mode_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ'"""
        query = update.callback_query
        await query.answer()
        
        if not await self.check_access(update, context):
            return
        
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = self.db.get_active_wallet(user_id)
        
        if not active_wallet:
            keyboard = [
                [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        user_data = self.db.get_user(user_id)
        current_auto_mode = user_data.get('auto_mode', False)
        new_auto_mode = not current_auto_mode
        self.db.update_user_auto_mode(user_id, new_auto_mode)

        status = "–í–ö–õ–Æ–ß–ï–ù" if new_auto_mode else "–í–´–ö–õ–Æ–ß–ï–ù"
        status_emoji = "‚úÖ" if new_auto_mode else "‚ùå"
        
        auto_text = f"""
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º {status}!**

üì± **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:** {active_wallet['wallet_name']}
üè¶ **–ê–¥—Ä–µ—Å:** `{active_wallet['wallet_address']}`

**–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
‚Ä¢ {'–õ—é–±–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω' if new_auto_mode else '–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
‚Ä¢ {'–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞' if new_auto_mode else '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'}
‚Ä¢ {'–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö' if new_auto_mode else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="auto_mode")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_management")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(auto_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("wallet", self.wallet_command))
        self.application.add_handler(CommandHandler("auto", self.auto_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("api", self.api_command))
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin_add_user", self.admin_add_user_command))
        self.application.add_handler(CommandHandler("admin_remove_user", self.admin_remove_user_command))
        self.application.add_handler(CommandHandler("admin_list_users", self.admin_list_users_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        from telegram.ext import CallbackQueryHandler
        self.application.add_handler(CallbackQueryHandler(self.get_api_key_callback, pattern="^get_api_key$"))
        self.application.add_handler(CallbackQueryHandler(self.api_docs_callback, pattern="^api_docs$"))
        self.application.add_handler(CallbackQueryHandler(self.api_examples_callback, pattern="^api_examples$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.application.add_handler(CallbackQueryHandler(self.add_wallet_callback, pattern="^add_wallet$"))
        self.application.add_handler(CallbackQueryHandler(self.check_status_callback, pattern="^check_status$"))
        self.application.add_handler(CallbackQueryHandler(self.check_balance_callback, pattern="^check_balance$"))
        self.application.add_handler(CallbackQueryHandler(self.show_help_callback, pattern="^show_help$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫! –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ, –ø–æ—Ç–æ–º –æ–±—â–∏–µ)
        self.application.add_handler(CallbackQueryHandler(self.wallet_action_callback, pattern="^wallet_action_"))
        self.application.add_handler(CallbackQueryHandler(self.wallet_back_callback, pattern="^wallet_back$"))
        self.application.add_handler(CallbackQueryHandler(self.wallet_management_callback, pattern="^wallet_management$"))
        self.application.add_handler(CallbackQueryHandler(self.wallet_management_callback, pattern="^wallet_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.application.add_handler(CallbackQueryHandler(self.main_menu_callback, pattern="^main_menu$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ —Ä–µ–∂–∏–º–∞
        self.application.add_handler(CallbackQueryHandler(self.auto_mode_callback, pattern="^auto_mode$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_wallet_input))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.job_queue.run_repeating(
            self.check_payments_task,
            interval=config.CHECK_INTERVAL,
            first=10
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üîí –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ Payment Bot...")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        print("ü§ñ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –õ–Æ–ë–´–• –ø–ª–∞—Ç–µ–∂–µ–π")
        print(f"üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.allowed_users)}")
        print("üõ°Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: –í–ö–õ–Æ–ß–ï–ù")
        
        self.application.run_polling()

if __name__ == "__main__":
    bot = PrivatePaymentBot()
    bot.run()
