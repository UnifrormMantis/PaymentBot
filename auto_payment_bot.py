#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ª—é–±—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
–õ—é–±–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from database import Database
from tron_tracker import TronTracker
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AutoPaymentBot:
    def __init__(self):
        self.db = Database()
        self.tron_tracker = TronTracker()
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        self.db.add_user(user_id, username, "")
        
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto Payment Bot!\n\n"
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ—Ç –õ–Æ–ë–´–ï –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/wallet - –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/auto - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
            "/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "/balance - –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ª—é–±–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω!"
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await update.message.reply_text(
            "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "üîπ /wallet <–∞–¥—Ä–µ—Å> - –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "   –ü—Ä–∏–º–µ—Ä: /wallet TYourAddress123456789\n\n"
            "üîπ /auto - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
            "   –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ª—é–±–æ–π –ø–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è\n\n"
            "üîπ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
            "üîπ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n\n"
            "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üí° –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –∑–∞—á–∏—Å–ª—è–µ—Ç –õ–Æ–ë–´–ï –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!"
        )
    
    async def wallet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /wallet - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /wallet TYourAddress123456789"
            )
            return
        
        wallet_address = context.args[0]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not wallet_address.startswith('T') or len(wallet_address) != 34:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞!\n\n"
                "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: TYourAddress123456789"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_user_wallet(user_id, wallet_address)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.db.add_tracked_wallet(wallet_address, user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üì± –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username or 'Unknown'}\n\n"
            f"ü§ñ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫!\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
            parse_mode='Markdown'
        )
    
    async def auto_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /auto - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user(user_id)
        if not user_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet"
            )
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
        current_mode = user_data.get('auto_mode', False)
        new_mode = not current_mode
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_user_auto_mode(user_id, new_mode)
        
        if new_mode:
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–ï–ù!\n\n"
                "ü§ñ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—å –õ–Æ–ë–´–ï –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!\n"
                "üí∞ –ù–µ–≤–∞–∂–Ω–æ –∫–∞–∫–∞—è —Å—É–º–º–∞ - –≤—Å–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n\n"
                "üì± –í–∞—à –∫–æ—à–µ–ª–µ–∫: `" + user_data['wallet_address'] + "`\n"
                "üîÑ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ " + str(config.CHECK_INTERVAL) + " —Å–µ–∫—É–Ω–¥",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù!\n\n"
                "ü§ñ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—å –ø–ª–∞—Ç–µ–∂–∏.\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto —Å–Ω–æ–≤–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞."
            )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π"""
        user_id = update.effective_user.id
        
        user_data = self.db.get_user(user_id)
        if not user_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        wallet_address = user_data['wallet_address']
        auto_mode = user_data.get('auto_mode', False)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT COUNT(*), SUM(amount) 
            FROM confirmed_payments 
            WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        total_payments = result[0] or 0
        total_amount = result[1] or 0
        
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}\n"
            f"üì± –ö–æ—à–µ–ª–µ–∫: `{wallet_address}`\n"
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if auto_mode else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}\n\n"
            f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} USDT\n\n"
            f"üîÑ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥",
            parse_mode='Markdown'
        )
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance - –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.effective_user.id
        
        user_data = self.db.get_user(user_id)
        if not user_data or not user_data['wallet_address']:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet"
            )
            return
        
        wallet_address = user_data['wallet_address']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            balance = self.tron_tracker.get_usdt_balance(wallet_address)
            
            await update.message.reply_text(
                f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
                f"üíµ USDT: {balance:.2f}\n\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.tron_tracker.get_last_update_time()}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def check_payments_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, wallet_address 
                FROM users 
                WHERE wallet_address IS NOT NULL AND wallet_address != '' AND auto_mode = 1
            ''')
            users = cursor.fetchall()
            conn.close()
            
            for user_id, wallet_address in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    new_transfers = self.tron_tracker.get_new_transfers(wallet_address)
                    
                    for transfer in new_transfers:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
                        conn = self.db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute('''
                            SELECT COUNT(*) FROM confirmed_payments 
                            WHERE transaction_hash = ?
                        ''', (transfer['tx_hash'],))
                        already_processed = cursor.fetchone()[0] > 0
                        conn.close()
                        
                        if not already_processed:
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                            self.db.confirm_payment(
                                user_id,
                                transfer['amount'],
                                'USDT',
                                transfer['tx_hash'],
                                wallet_address
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            try:
                                await context.bot.send_message(
                                    chat_id=user_id,
                                    text=f"üéâ –ü–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂!\n\n"
                                         f"üí∞ –°—É–º–º–∞: {transfer['amount']:.2f} USDT\n"
                                         f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transfer['tx_hash']}`\n"
                                         f"üì± –ö–æ—à–µ–ª–µ–∫: `{wallet_address}`\n\n"
                                         f"‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω!",
                                    parse_mode='Markdown'
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("wallet", self.wallet_command))
        self.application.add_handler(CommandHandler("auto", self.auto_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.job_queue.run_repeating(
            self.check_payments_task,
            interval=config.CHECK_INTERVAL,
            first=10
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üöÄ –ó–∞–ø—É—Å–∫ Auto Payment Bot...")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        print("ü§ñ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –õ–Æ–ë–´–• –ø–ª–∞—Ç–µ–∂–µ–π")
        
        self.application.run_polling()

if __name__ == "__main__":
    bot = AutoPaymentBot()
    bot.run()





