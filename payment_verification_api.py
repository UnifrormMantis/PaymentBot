#!/usr/bin/env python3
"""
API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDT –ø–ª–∞—Ç–µ–∂–µ–π
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö USDT
"""

import asyncio
import logging
from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, Dict, Any
import uvicorn
import secrets
import hashlib
from datetime import datetime, timedelta
from database import Database
from tron_tracker import TronTracker
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Payment Verification API",
    description="API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDT –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    version="1.1.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = Database()
tron_tracker = TronTracker()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ API –∫–ª—é—á–µ–π
api_keys = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PaymentVerificationRequest(BaseModel):
    user_wallet: str  # –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expected_amount: float  # –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
    currency: str = "USDT"  # –í–∞–ª—é—Ç–∞
    description: Optional[str] = None  # –û–ø–∏—Å–∞–Ω–∏–µ

class PaymentVerificationResponse(BaseModel):
    success: bool
    payment_found: bool
    received_amount: float
    currency: str
    transaction_hash: Optional[str] = None
    confirmed_at: Optional[str] = None
    user_wallet: str
    message: str

class APIKeyResponse(BaseModel):
    success: bool
    api_key: str
    message: str
    usage: Dict[str, str]

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
async def verify_api_key(x_api_key: str = Header(None)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
    if not x_api_key:
        raise HTTPException(status_code=401, detail="API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –∫–ª—é—á
    return x_api_key

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Payment Verification API",
        "version": "1.1.0",
        "description": "API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDT –ø–ª–∞—Ç–µ–∂–µ–π",
        "endpoints": {
            "get_api_key": "GET /get-api-key",
            "verify_payment": "POST /verify-payment",
            "health": "GET /health"
        }
    }

@app.get("/get-api-key", response_model=APIKeyResponse)
async def get_api_key():
    """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á
    api_key = secrets.token_urlsafe(32)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
    api_keys[api_key] = {
        "created_at": datetime.now(),
        "last_used": None,
        "usage_count": 0
    }
    
    return APIKeyResponse(
        success=True,
        api_key=api_key,
        message="API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
        usage={
            "header": "X-API-Key",
            "example": f"X-API-Key: {api_key}"
        }
    )

@app.post("/verify-payment", response_model=PaymentVerificationResponse)
async def verify_payment(
    request: PaymentVerificationRequest,
    api_key: str = Depends(verify_api_key)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
    - user_wallet: –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - expected_amount: –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
    - currency: –≤–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - payment_found: –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
    - received_amount: –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    - transaction_hash: —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    - confirmed_at: –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {request.user_wallet} -> {request.expected_amount} {request.currency}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not tron_tracker.validate_address(request.user_wallet):
            return PaymentVerificationResponse(
                success=False,
                payment_found=False,
                received_amount=0.0,
                currency=request.currency,
                user_wallet=request.user_wallet,
                message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        our_wallet = "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        transactions = tron_tracker.get_new_transfers(our_wallet)
        
        if not transactions:
            return PaymentVerificationResponse(
                success=True,
                payment_found=False,
                received_amount=0.0,
                currency=request.currency,
                user_wallet=request.user_wallet,
                message="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
        
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        found_payment = None
        for tx in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if (tx.get('token_info', {}).get('contract_address') == config.USDT_CONTRACT_ADDRESS and
                tx.get('from') == request.user_wallet and
                tx.get('to') == our_wallet):
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ USDT (6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
                amount = float(tx.get('value', 0)) / 1000000
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π (—Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
                if abs(amount - request.expected_amount) <= 0.01:  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 USDT
                    found_payment = {
                        'amount': amount,
                        'transaction_hash': tx.get('transaction_id'),
                        'confirmed_at': tx.get('block_timestamp'),
                        'from': tx.get('from'),
                        'to': tx.get('to')
                    }
                    break
        
        if found_payment:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API –∫–ª—é—á–∞
            if api_key in api_keys:
                api_keys[api_key]['last_used'] = datetime.now()
                api_keys[api_key]['usage_count'] += 1
            
            return PaymentVerificationResponse(
                success=True,
                payment_found=True,
                received_amount=found_payment['amount'],
                currency=request.currency,
                transaction_hash=found_payment['transaction_hash'],
                confirmed_at=found_payment['confirmed_at'],
                user_wallet=request.user_wallet,
                message=f"–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: {found_payment['amount']} {request.currency}"
            )
        else:
            return PaymentVerificationResponse(
                success=True,
                payment_found=False,
                received_amount=0.0,
                currency=request.currency,
                user_wallet=request.user_wallet,
                message=f"–ü–ª–∞—Ç–µ–∂ –æ—Ç {request.user_wallet} –Ω–∞ —Å—É–º–º—É {request.expected_amount} {request.currency} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return PaymentVerificationResponse(
            success=False,
            payment_found=False,
            received_amount=0.0,
            currency=request.currency,
            user_wallet=request.user_wallet,
            message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
        )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = db.get_connection()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tron API
        balance = tron_tracker.get_balance("TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx")
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "services": {
                "database": "ok",
                "tron_api": "ok",
                "wallet_balance": balance
            }
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@app.get("/wallet-info")
async def get_wallet_info(api_key: str = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    our_wallet = "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx"
    balance = tron_tracker.get_balance(our_wallet)
    
    return {
        "success": True,
        "wallet_address": our_wallet,
        "balance": balance,
        "currency": "USDT",
        "message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
    }

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Payment Verification API...")
    print("=" * 50)
    print("üì° API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8002")
    print("üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8002/docs")
    print("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: GET /get-api-key")
    print("üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂: POST /verify-payment")
    print("=" * 50)
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8002,
        log_level="info"
    )


