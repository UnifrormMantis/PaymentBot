#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
from payment_integration import PaymentIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestBot:
    """–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.payment_system = PaymentIntegration()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.payment_system.register_payment_callback(
            user_id=0,  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π user_id
            callback=self.on_payment_received
        )
    
    async def on_payment_received(self, user_id: int, amount: float, 
                                currency: str, transaction_hash: str, 
                                wallet_address: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        print(f"üéâ –ü–û–õ–£–ß–ï–ù –ü–õ–ê–¢–ï–ñ!")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"   üí∞ –°—É–º–º–∞: {amount} {currency}")
        print(f"   üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction_hash}")
        print(f"   üì± –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
        print()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await self.process_payment_logic(user_id, amount, currency)
    
    async def process_payment_logic(self, user_id: int, amount: float, currency: str):
        """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
        if amount >= 100:
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")
        elif amount >= 50:
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        else:
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        print()
    
    async def test_create_payment(self, user_id: int, amount: float):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        print(f"üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"   üí∞ –°—É–º–º–∞: {amount} USDT")
        print()
        
        result = await self.payment_system.create_payment_request(
            user_id=user_id,
            amount=amount,
            currency="USDT",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        )
        
        if result['success']:
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   üÜî ID: {result['payment_id']}")
            print(f"   üì± –ö–æ—à–µ–ª–µ–∫: {result['wallet_address']}")
            print(f"   üí∞ –°—É–º–º–∞: {result['amount']} {result['currency']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result['error']}")
        
        print()
        return result
    
    async def test_auto_payment(self, user_id: int, wallet_address: str):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        print(f"üß™ –¢–ï–°–¢: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"   üì± –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
        print()
        
        result = await self.payment_system.create_auto_payment_request(
            user_id=user_id,
            wallet_address=wallet_address,
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂"
        )
        
        if result['success']:
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
            print(f"   üì± –ö–æ—à–µ–ª–µ–∫: {result['wallet_address']}")
            print(f"   ü§ñ –†–µ–∂–∏–º: {result['auto_mode']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {result['error']}")
        
        print()
        return result
    
    async def test_check_status(self, user_id: int):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        print(f"üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print()
        
        result = await self.payment_system.check_payment_status(user_id)
        
        if result['success']:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
            print(f"   üìä –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(result['pending_payments'])}")
            print(f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(result['confirmed_payments'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {result['error']}")
        
        print()
        return result
    
    async def test_balance(self, user_id: int):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
        print(f"üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print()
        
        result = await self.payment_system.get_wallet_balance(user_id)
        
        if result['success']:
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:")
            print(f"   üì± –ö–æ—à–µ–ª–µ–∫: {result['wallet_address']}")
            print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {result['balance']} {result['currency']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result['error']}")
        
        print()
        return result
    
    async def test_integration_info(self):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print(f"üß™ –¢–ï–°–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print()
        
        info = self.payment_system.get_integration_info()
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   üì¶ –í–µ—Ä—Å–∏—è: {info['version']}")
        print(f"   üöÄ –§—É–Ω–∫—Ü–∏–∏: {', '.join(info['features'])}")
        print(f"   üí± –í–∞–ª—é—Ç—ã: {', '.join(info['supported_currencies'])}")
        print(f"   üîå API: {len(info['api_endpoints'])} –º–µ—Ç–æ–¥–æ–≤")
        print()
        
        return info
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 12345
        test_wallet = "TTestWallet1234567890123456789012345"
        test_amount = 100.0
        
        try:
            # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self.test_integration_info()
            
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            await self.test_create_payment(test_user_id, test_amount)
            
            # –¢–µ—Å—Ç 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            await self.test_auto_payment(test_user_id, test_wallet)
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            await self.test_check_status(test_user_id)
            
            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            await self.test_balance(test_user_id)
            
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print()
            print("üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ PaymentIntegration –≤ –≤–∞—à –±–æ—Ç")
            print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
            print("   3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏")
            print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    test_bot = TestBot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await test_bot.run_tests()

if __name__ == "__main__":
    asyncio.run(main())





