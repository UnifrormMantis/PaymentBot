#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Payment Bot –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
"""

# API –∫–ª—é—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á" –≤ –±–æ—Ç–µ)
PAYMENT_API_KEY = "YOUR_API_KEY_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

# URL API —Å–µ—Ä–≤–∏—Å–∞
PAYMENT_API_URL = "http://localhost:8001"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
PAYMENT_SETTINGS = {
    "default_currency": "USDT",
    "timeout": 30,  # —Å–µ–∫—É–Ω–¥
    "retry_attempts": 3,
    "check_interval": 10,  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
"""
from simple_client import SimplePaymentClient
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
payment_client = SimplePaymentClient(PAYMENT_API_KEY)

async def create_payment_for_user(user_id: int, amount: float, currency: str = "USDT"):
    '''–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = payment_client.create_payment(amount, currency)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        message = f"""
üí∞ **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!**

üí≥ **–°—É–º–º–∞:** {amount} {currency}
üè¶ **–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:** `{payment['wallet_address']}`
üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** {payment['payment_id']}

‚è∞ **–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:** 30 –º–∏–Ω—É—Ç
        """
        
        return {
            "success": True,
            "payment_id": payment['payment_id'],
            "wallet_address": payment['wallet_address'],
            "amount": amount,
            "currency": currency,
            "message": message
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

async def check_payment_status(payment_id: str):
    '''–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞'''
    try:
        status = payment_client.check_payment_status(payment_id)
        return {
            "success": True,
            "status": status['status'],
            "confirmed": status.get('confirmed', False)
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞
async def payment_command(update, context):
    '''–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'''
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞!\n–ü—Ä–∏–º–µ—Ä: /payment 100")
        return
    
    try:
        amount = float(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        result = await create_payment_for_user(user_id, amount)
        
        if result["success"]:
            await update.message.reply_text(
                result["message"],
                parse_mode='Markdown'
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(check_payment_periodically(
                update, context, result["payment_id"]
            ))
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result['error']}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")

async def check_payment_periodically(update, context, payment_id: str):
    '''–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'''
    import time
    
    for _ in range(18):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 18 —Ä–∞–∑ –ø–æ 10 —Å–µ–∫—É–Ω–¥ = 3 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(10)
        
        result = await check_payment_status(payment_id)
        
        if result["success"] and result["confirmed"]:
            await update.message.reply_text(
                "‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            break
    else:
        await update.message.reply_text(
            "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ.\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–ª–∞—Ç–µ–∂, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
"""






