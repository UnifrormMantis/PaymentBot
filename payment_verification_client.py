#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDT –ø–ª–∞—Ç–µ–∂–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import requests
import json
import time
from typing import Optional, Dict, Any
from datetime import datetime

class PaymentVerificationClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self, api_key: str, base_url: str = "http://localhost:8002"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            base_url: –ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            "X-API-Key": api_key,
            "Content-Type": "application/json"
        }
    
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=self.headers, timeout=10)
            elif method.upper() == "POST":
                response = requests.post(url, headers=self.headers, json=data, timeout=10)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            }
        except json.JSONDecodeError as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
            }
    
    def verify_payment(self, user_wallet: str, expected_amount: float, currency: str = "USDT", description: str = "") -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_wallet: –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expected_amount: –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
            currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        data = {
            "user_wallet": user_wallet,
            "expected_amount": expected_amount,
            "currency": currency,
            "description": description
        }
        
        return self._make_request("POST", "/verify-payment", data=data)
    
    def get_wallet_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ
        """
        return self._make_request("GET", "/wallet-info")
    
    def wait_for_payment(self, user_wallet: str, expected_amount: float, timeout: int = 300, check_interval: int = 10) -> Dict[str, Any]:
        """
        –û–∂–∏–¥–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_wallet: –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expected_amount: –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            result = self.verify_payment(user_wallet, expected_amount)
            
            if not result.get("success", False):
                return result
            
            if result.get("payment_found", False):
                return result
            
            time.sleep(check_interval)
        
        # –¢–∞–π–º–∞—É—Ç
        return {
            "success": True,
            "payment_found": False,
            "received_amount": 0.0,
            "currency": "USDT",
            "user_wallet": user_wallet,
            "message": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
class MainBotPaymentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, api_key: str):
        self.payment_client = PaymentVerificationClient(api_key)
    
    def handle_user_payment(self, user_id: int, user_wallet: str, amount: float, product_name: str = ""):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            user_wallet: –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"   –ö–æ—à–µ–ª–µ–∫: {user_wallet}")
        print(f"   –°—É–º–º–∞: {amount} USDT")
        print(f"   –¢–æ–≤–∞—Ä: {product_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        result = self.payment_client.verify_payment(
            user_wallet=user_wallet,
            expected_amount=amount,
            currency="USDT",
            description=f"–ü–æ–∫—É–ø–∫–∞ {product_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
        )
        
        if result.get("success") and result.get("payment_found"):
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {result['received_amount']} USDT")
            print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {result.get('transaction_hash', 'N/A')}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞:
            # - –ó–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
            # - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # - –ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            
            return {
                "success": True,
                "payment_confirmed": True,
                "amount_received": result['received_amount'],
                "transaction_hash": result.get('transaction_hash'),
                "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            }
        else:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            return {
                "success": False,
                "payment_confirmed": False,
                "amount_received": 0.0,
                "message": result.get('message', '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ì–û API")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    try:
        response = requests.get("http://localhost:8002/get-api-key")
        if response.status_code == 200:
            api_data = response.json()
            api_key = api_data['api_key']
            print(f"‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {api_key}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞")
            exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = PaymentVerificationClient(api_key)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ...")
    wallet_info = client.get_wallet_info()
    if wallet_info.get("success"):
        print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫: {wallet_info['wallet_address']}")
        print(f"   –ë–∞–ª–∞–Ω—Å: {wallet_info['balance']} {wallet_info['currency']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {wallet_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π)
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    test_result = client.verify_payment(
        user_wallet="TTestWallet1234567890123456789012345",
        expected_amount=1.00,
        currency="USDT",
        description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
    )
    
    if test_result.get("success"):
        if test_result.get("payment_found"):
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: {test_result['received_amount']} USDT")
        else:
            print(f"‚ÑπÔ∏è  –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞)")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
    print("\n3. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ...")
    main_bot = MainBotPaymentHandler(api_key)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
    result = main_bot.handle_user_payment(
        user_id=123456789,
        user_wallet="TTestWallet1234567890123456789012345",
        amount=5.00,
        product_name="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
    )
    
    if result["success"] and result["payment_confirmed"]:
        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {result['amount_received']} USDT")
    else:
        print(f"‚ÑπÔ∏è  –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result['message']}")
    
    print("\n" + "=" * 40)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –±–æ—Ç–µ:")
    print("   1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á: GET /get-api-key")
    print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PaymentVerificationClient")
    print("   3. –í—ã–∑—ã–≤–∞–π—Ç–µ verify_payment() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
