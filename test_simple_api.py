#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
"""

import requests
import json

def test_simple_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ API"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û API")
    print("=" * 40)
    
    # –í–∞—à –∫–æ—à–µ–ª–µ–∫
    address = "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx"
    print(f"üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫: {address}")
    print()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API endpoints
    apis = [
        {
            "name": "TronGrid (–±–µ–∑ –∫–ª—é—á–∞)",
            "url": f"https://api.trongrid.io/v1/accounts/{address}",
            "method": "GET"
        },
        {
            "name": "TronGrid Wallet",
            "url": "https://api.trongrid.io/wallet/getaccount",
            "method": "POST",
            "data": {"address": address, "visible": True}
        },
        {
            "name": "TronScan API",
            "url": f"https://apilist.tronscanapi.com/api/account?address={address}",
            "method": "GET"
        }
    ]
    
    for api in apis:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {api['name']}")
        print(f"üì° URL: {api['url']}")
        
        try:
            if api['method'] == 'GET':
                response = requests.get(api['url'], timeout=10)
            else:
                response = requests.post(api['url'], json=api.get('data', {}), timeout=10)
            
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                
                # –ò—â–µ–º USDT –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                usdt_balance = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
                if 'data' in data:
                    if isinstance(data['data'], list):
                        for item in data['data']:
                            if item.get('contract_address') == 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t':
                                usdt_balance = float(item.get('balance', 0)) / 1000000
                                break
                    elif isinstance(data['data'], dict):
                        trc20 = data['data'].get('trc20', [])
                        for token in trc20:
                            if token.get('contract_address') == 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t':
                                usdt_balance = float(token.get('balance', 0)) / 1000000
                                break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º trc20 –Ω–∞–ø—Ä—è–º—É—é
                if not usdt_balance and 'trc20' in data:
                    for token in data['trc20']:
                        if token.get('contract_address') == 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t':
                            usdt_balance = float(token.get('balance', 0)) / 1000000
                            break
                
                if usdt_balance is not None:
                    print(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {usdt_balance}")
                else:
                    print("üí° USDT –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    print(f"üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, indent=2)[:500]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text[:200]}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 40)

if __name__ == "__main__":
    test_simple_api()





