#!/usr/bin/env python3
"""
–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Payment Bot –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
–ö–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É
"""

import sqlite3
import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Payment Bot API
PAYMENT_API_URL = "http://localhost:8001"
PAYMENT_API_KEY = "your_api_key_here"  # –ü–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ GET /get-api-key

# =============================================================================
# –ö–õ–ò–ï–ù–¢ –î–õ–Ø –†–ê–ë–û–¢–´ –° PAYMENT BOT API
# =============================================================================

class PaymentClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Payment Bot API"""
    
    def __init__(self, api_key: str, base_url: str = PAYMENT_API_URL):
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            'X-API-Key': self.api_key,
            'Content-Type': 'application/json'
        }
    
    def get_payment_wallet(self, user_wallet: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            response = requests.post(
                f"{self.base_url}/get-payment-wallet",
                headers=self.headers,
                json={"user_wallet": user_wallet},
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return {"success": False, "error": str(e)}
    
    def check_user_payments(self, user_wallet: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(
                f"{self.base_url}/check-user-payments",
                headers=self.headers,
                json={"user_wallet": user_wallet},
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {"success": False, "error": str(e)}

# =============================================================================
# –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# =============================================================================

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, db_path: str = "bot_database.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                wallet_address TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS deposits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                currency TEXT DEFAULT 'USDT',
                wallet_address TEXT,
                tx_hash TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_balances (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 0.0,
                currency TEXT DEFAULT 'USDT',
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def save_user_wallet(self, user_id: int, wallet_address: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, wallet_address)
            VALUES (?, ?)
        ''', (user_id, wallet_address))
        
        conn.commit()
        conn.close()
    
    def get_user_wallet(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT wallet_address FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result else None
    
    def add_deposit(self, user_id: int, amount: float, wallet_address: str, tx_hash: str):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO deposits (user_id, amount, currency, wallet_address, tx_hash, status)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, amount, 'USDT', wallet_address, tx_hash, 'confirmed'))
        
        conn.commit()
        conn.close()
    
    def update_balance(self, user_id: int, amount: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_balances (user_id, balance, currency)
            VALUES (?, COALESCE((SELECT balance FROM user_balances WHERE user_id = ?), 0) + ?, ?)
        ''', (user_id, user_id, amount, 'USDT'))
        
        conn.commit()
        conn.close()
    
    def get_balance(self, user_id: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result else 0.0

# =============================================================================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# =============================================================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = DatabaseManager()
payment_client = PaymentClient(PAYMENT_API_KEY, PAYMENT_API_URL)

async def wallet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª–µ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if len(context.args) < 1:
        await update.message.reply_text(
            "üí≥ **–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/wallet TYourWalletAddress123456789`\n\n"
            "–≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
        )
        return
    
    wallet_address = context.args[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.save_user_wallet(user_id, wallet_address)
    
    await update.message.reply_text(
        f"‚úÖ **–ö–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
        f"üì± –í–∞—à –∫–æ—à–µ–ª–µ–∫: `{wallet_address}`\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/pay` –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."
    )

async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_wallet = db.get_user_wallet(user_id)
    
    if not user_wallet:
        await update.message.reply_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/wallet TYourWalletAddress123456789`"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    response = payment_client.get_payment_wallet(user_wallet)
    
    if not response.get('success'):
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {response.get('error')}")
        return
    
    active_wallet = response['wallet_address']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
    ])
    
    await update.message.reply_text(
        f"üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n"
        f"üì± –í–∞—à –∫–æ—à–µ–ª–µ–∫: `{user_wallet}`\n"
        f"üè¶ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{active_wallet}`\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, "
        f"–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'",
        reply_markup=keyboard
    )

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    
    balance = db.get_balance(user_id)
    
    await update.message.reply_text(
        f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**\n\n"
        f"üíµ –ë–∞–ª–∞–Ω—Å: {balance} USDT\n"
        f"üì± ID: {user_id}"
    )

async def check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_wallet = db.get_user_wallet(user_id)
    
    if not user_wallet:
        await query.edit_message_text("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
    response = payment_client.check_user_payments(user_wallet)
    
    if not response.get('success'):
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {response.get('error')}")
        return
    
    payments = response.get('payments', [])
    
    if not payments:
        await query.edit_message_text("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    total_amount = 0
    for payment in payments:
        if payment['confirmed']:
            total_amount += payment['amount']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
            db.add_deposit(user_id, payment['amount'], user_wallet, payment['tx_hash'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            db.update_balance(user_id, payment['amount'])
    
    if total_amount > 0:
        await query.edit_message_text(
            f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n"
            f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {total_amount} USDT\n"
            f"üì± –í–∞—à –∫–æ—à–µ–ª–µ–∫: `{user_wallet}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/balance` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞."
        )
    else:
        await query.edit_message_text("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cancel_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")

# =============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
# =============================================================================

def register_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("wallet", wallet_command))
    application.add_handler(CommandHandler("pay", pay_command))
    application.add_handler(CommandHandler("balance", balance_command))
    
    # Callback queries
    application.add_handler(CallbackQueryHandler(check_payment_callback, pattern="^check_payment$"))
    application.add_handler(CallbackQueryHandler(cancel_payment_callback, pattern="^cancel_payment$"))

# =============================================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# =============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
    from telegram.ext import Application
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("YOUR_BOT_TOKEN").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def get_payment_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    cursor.execute('SELECT SUM(amount) FROM deposits WHERE status = "confirmed"')
    total_deposits = cursor.fetchone()[0] or 0
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    cursor.execute('SELECT COUNT(*) FROM deposits WHERE status = "confirmed"')
    total_transactions = cursor.fetchone()[0]
    
    conn.close()
    
    return {
        "total_deposits": total_deposits,
        "total_users": total_users,
        "total_transactions": total_transactions
    }

def get_user_deposits(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT amount, currency, tx_hash, created_at, status
        FROM deposits 
        WHERE user_id = ? 
        ORDER BY created_at DESC
        LIMIT 10
    ''', (user_id,))
    
    deposits = cursor.fetchall()
    conn.close()
    
    return deposits

def format_wallet_address(address: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"""
    if len(address) <= 8:
        return address
    return f"{address[:4]}...{address[-4:]}"

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('payment_bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# =============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# =============================================================================

"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   db.save_user_wallet(12345, "TUserWallet123456789")

2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   wallet = db.get_user_wallet(12345)

3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:
   response = payment_client.get_payment_wallet("TUserWallet123456789")
   active_wallet = response['wallet_address']

4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   response = payment_client.check_user_payments("TUserWallet123456789")
   payments = response['payments']

5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:
   db.update_balance(12345, 100.0)

6. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:
   balance = db.get_balance(12345)

7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
   stats = get_payment_statistics()
   print(f"–û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats['total_deposits']} USDT")

8. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   deposits = get_user_deposits(12345)
   for deposit in deposits:
       print(f"–°—É–º–º–∞: {deposit[0]}, –•–µ—à: {deposit[2]}")
"""






