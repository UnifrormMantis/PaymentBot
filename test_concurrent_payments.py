#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import asyncio
import time
import threading
from database import Database
from tron_tracker import TronTracker
import config

def test_concurrent_payments():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    print("üß™ –¢–ï–°–¢ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database("test_concurrent.db")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_users = [
        {"user_id": 1001, "username": "user1", "wallet": "TTestWallet1111111111111111111111111"},
        {"user_id": 1002, "username": "user2", "wallet": "TTestWallet2222222222222222222222222"},
        {"user_id": 1003, "username": "user3", "wallet": "TTestWallet3333333333333333333333333"},
    ]
    
    print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in test_users:
        db.add_user(user["user_id"], user["username"], user["wallet"])
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']} (ID: {user['user_id']})")
    
    print()
    
    # –¢–µ—Å—Ç 1: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    print("üìä –¢–ï–°–¢ 1: –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ï–ô")
    print("-" * 40)
    
    def create_payment(user_id, amount, currency, wallet):
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂"""
        try:
            payment_id = db.add_pending_payment(user_id, amount, currency, wallet)
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ø–ª–∞—Ç–µ–∂ {amount} {currency} (ID: {payment_id})")
            return payment_id
        except Exception as e:
            print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—à–∏–±–∫–∞ - {e}")
            return None
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    threads = []
    results = []
    
    for i, user in enumerate(test_users):
        thread = threading.Thread(
            target=lambda u=user, amt=100+i*10: results.append(
                create_payment(u["user_id"], amt, "USDT", u["wallet"])
            )
        )
        threads.append(thread)
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join()
    
    print(f"   üìä –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len([r for r in results if r is not None])}")
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
    print("üìä –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID")
    print("-" * 40)
    
    unique_ids = set(results)
    if len(unique_ids) == len(results):
        print("   ‚úÖ –í—Å–µ ID –ø–ª–∞—Ç–µ–∂–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã")
    else:
        print("   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID")
    
    print()
    
    # –¢–µ—Å—Ç 3: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    print("üìä –¢–ï–°–¢ 3: –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ï–ô")
    print("-" * 40)
    
    def confirm_payment(user_id, amount, currency, tx_hash, wallet):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
        try:
            db.confirm_payment(user_id, amount, currency, tx_hash, wallet)
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (TX: {tx_hash[:10]}...)")
            return True
        except Exception as e:
            print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - {e}")
            return False
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    confirm_threads = []
    confirm_results = []
    
    for i, user in enumerate(test_users):
        tx_hash = f"test_tx_{i}_{int(time.time())}"
        thread = threading.Thread(
            target=lambda u=user, amt=100+i*10, tx=tx_hash: confirm_results.append(
                confirm_payment(u["user_id"], amt, "USDT", tx, u["wallet"])
            )
        )
        confirm_threads.append(thread)
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in confirm_threads:
        thread.join()
    
    print(f"   üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {sum(confirm_results)}")
    print()
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    print("üìä –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    pending_payments = []
    for user in test_users:
        payments = db.get_pending_payments(user["wallet"])
        pending_payments.extend(payments)
    
    print(f"   üìä –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(pending_payments)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    import sqlite3
    conn = sqlite3.connect("test_concurrent.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM confirmed_payments")
    confirmed_count = cursor.fetchone()[0]
    conn.close()
    
    print(f"   üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {confirmed_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    conn = sqlite3.connect("test_concurrent.db")
    cursor = conn.cursor()
    cursor.execute("SELECT transaction_hash FROM confirmed_payments")
    tx_hashes = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    unique_tx = set(tx_hashes)
    if len(unique_tx) == len(tx_hashes):
        print("   ‚úÖ –í—Å–µ —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã")
    else:
        print("   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    print()
    
    # –¢–µ—Å—Ç 5: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
    print("üìä –¢–ï–°–¢ 5: –°–¢–†–ï–°–°-–¢–ï–°–¢ (10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)")
    print("-" * 40)
    
    stress_threads = []
    stress_results = []
    
    def stress_payment(user_id, amount, currency, wallet):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_id = db.add_pending_payment(user_id, amount, currency, wallet)
            
            # –ù–µ–º–Ω–æ–≥–æ –∂–¥–µ–º
            time.sleep(0.1)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            tx_hash = f"stress_tx_{user_id}_{int(time.time())}"
            db.confirm_payment(user_id, amount, currency, tx_hash, wallet)
            
            return True
        except Exception as e:
            print(f"   ‚ùå –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç {user_id}: –æ—à–∏–±–∫–∞ - {e}")
            return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    for i in range(10):
        user_id = 2000 + i
        amount = 50 + i
        wallet = f"TStressWallet{i:03d}1111111111111111111111111"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user(user_id, f"stress_user_{i}", wallet)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç–µ–∂
        thread = threading.Thread(
            target=lambda uid=user_id, amt=amount, w=wallet: stress_results.append(
                stress_payment(uid, amt, "USDT", w)
            )
        )
        stress_threads.append(thread)
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in stress_threads:
        thread.join()
    
    successful_stress = sum(stress_results)
    print(f"   üìä –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤: {successful_stress}/10")
    
    if successful_stress == 10:
        print("   ‚úÖ –í—Å–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print("‚úÖ –°–ò–°–¢–ï–ú–ê –£–°–¢–û–ô–ß–ò–í–ê –ö –û–î–ù–û–í–†–ï–ú–ï–ù–ù–´–ú –ü–õ–ê–¢–ï–ñ–ê–ú:")
    print("   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–ª–∞—Ç–µ–∂–µ–π")
    print("   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    print("   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("   ‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å-–Ω–∞–≥—Ä—É–∑–∫–µ")
    print()
    
    print("üõ°Ô∏è –ú–ï–•–ê–ù–ò–ó–ú–´ –ó–ê–©–ò–¢–´:")
    print("   ‚Ä¢ SQLite –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã")
    print("   ‚Ä¢ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    print("   ‚Ä¢ –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    print()
    
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    print("   ‚Ä¢ –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
    print("   ‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
    import os
    if os.path.exists("test_concurrent.db"):
        os.remove("test_concurrent.db")
        print("   üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    test_concurrent_payments()
