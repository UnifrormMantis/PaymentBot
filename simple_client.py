#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
–ö–∞–∫ —É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤ - –æ–¥–∏–Ω API –∫–ª—é—á –∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import requests
import time
import json
from typing import Optional, Dict, Any

class SimplePaymentClient:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Payment API
    –ö–∞–∫ —É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤
    """
    
    def __init__(self, api_key: str, api_url: str = "http://localhost:8001"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            api_url: URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.api_key = api_key
        self.api_url = api_url.rstrip('/')
        self.headers = {
            'X-API-Key': api_key,
            'Content-Type': 'application/json'
        }
    
    def create_payment(self, amount: float, currency: str = "USDT", 
                      description: str = None, callback_url: str = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            callback_url: URL –¥–ª—è callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        """
        data = {
            "amount": amount,
            "currency": currency,
            "description": description,
            "callback_url": callback_url
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/create-payment",
                headers=self.headers,
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def check_payment(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            response = requests.get(
                f"{self.api_url}/check-payment/{payment_id}",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def wait_for_payment(self, payment_id: str, timeout: int = 300, 
                        check_interval: int = 10) -> Dict[str, Any]:
        """
        –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            result = self.check_payment(payment_id)
            
            if result.get('success') and result.get('status') == 'completed':
                return result
            elif result.get('success') and result.get('status') == 'failed':
                return result
            
            time.sleep(check_interval)
        
        return {
            "success": False,
            "error": "Timeout: –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Simple Payment Client")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞...")
    try:
        response = requests.get("http://localhost:8001/get-api-key")
        if response.status_code == 200:
            api_data = response.json()
            api_key = api_data['api_key']
            print(f"‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {api_key[:20]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = SimplePaymentClient(api_key)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
    payment_result = client.create_payment(
        amount=100.0,
        currency="USDT",
        description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
        callback_url="https://yourbot.com/webhook/payment"
    )
    
    if payment_result['success']:
        payment_id = payment_result['payment_id']
        wallet_address = payment_result['wallet_address']
        amount = payment_result['amount']
        
        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:")
        print(f"   ID: {payment_id}")
        print(f"   –°—É–º–º–∞: {amount} USDT")
        print(f"   –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...")
        status_result = client.check_payment(payment_id)
        
        if status_result['success']:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_result['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {status_result['error']}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)
        print(f"\n4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...")
        print("   (–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result['error']}")

if __name__ == "__main__":
    main()





