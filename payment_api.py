#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏
"""

import asyncio
import logging
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict
import uvicorn
from payment_integration import PaymentIntegration
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Payment Bot API",
    description="API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TRC20 –ø–ª–∞—Ç–µ–∂–µ–π –≤ Telegram –±–æ—Ç—ã",
    version="1.1.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
payment_system = PaymentIntegration()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PaymentRequest(BaseModel):
    user_id: int
    amount: float
    currency: str = "USDT"
    description: Optional[str] = None

class AutoPaymentRequest(BaseModel):
    user_id: int
    wallet_address: str
    description: Optional[str] = None

class PaymentStatusResponse(BaseModel):
    success: bool
    data: Optional[Dict] = None
    error: Optional[str] = None

class BalanceResponse(BaseModel):
    success: bool
    wallet_address: Optional[str] = None
    balance: Optional[float] = None
    currency: Optional[str] = None
    error: Optional[str] = None

class PaymentCallback(BaseModel):
    user_id: int
    amount: float
    currency: str
    transaction_hash: str
    wallet_address: str

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è callback —Ñ—É–Ω–∫—Ü–∏–π
payment_callbacks: Dict[int, callable] = {}

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Payment Bot API",
        "version": "1.1.0",
        "status": "running",
        "endpoints": [
            "/docs - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
            "/payment/create - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
            "/payment/auto - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂",
            "/payment/status - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π",
            "/payment/balance - –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞",
            "/payment/callback - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback"
        ]
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "payment_system": "active",
        "database": "connected"
    }

@app.post("/payment/create", response_model=PaymentStatusResponse)
async def create_payment(request: PaymentRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        result = await payment_system.create_payment_request(
            user_id=request.user_id,
            amount=request.amount,
            currency=request.currency,
            description=request.description
        )
        
        if result['success']:
            return PaymentStatusResponse(
                success=True,
                data=result
            )
        else:
            return PaymentStatusResponse(
                success=False,
                error=result['error']
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/payment/auto", response_model=PaymentStatusResponse)
async def setup_auto_payment(request: AutoPaymentRequest):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        result = await payment_system.create_auto_payment_request(
            user_id=request.user_id,
            wallet_address=request.wallet_address,
            description=request.description
        )
        
        if result['success']:
            return PaymentStatusResponse(
                success=True,
                data=result
            )
        else:
            return PaymentStatusResponse(
                success=False,
                error=result['error']
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/payment/status/{user_id}", response_model=PaymentStatusResponse)
async def get_payment_status(user_id: int, payment_id: Optional[int] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        result = await payment_system.check_payment_status(user_id, payment_id)
        
        if result['success']:
            return PaymentStatusResponse(
                success=True,
                data=result
            )
        else:
            return PaymentStatusResponse(
                success=False,
                error=result['error']
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/payment/balance/{user_id}", response_model=BalanceResponse)
async def get_wallet_balance(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        result = await payment_system.get_wallet_balance(user_id)
        
        if result['success']:
            return BalanceResponse(
                success=True,
                wallet_address=result['wallet_address'],
                balance=result['balance'],
                currency=result['currency']
            )
        else:
            return BalanceResponse(
                success=False,
                error=result['error']
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/payment/callback/{user_id}")
async def register_callback(user_id: int, callback_url: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è HTTP callback'–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL
        payment_callbacks[user_id] = callback_url
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_url}")
        
        return {
            "success": True,
            "message": f"Callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            "callback_url": callback_url
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/payment/callback/{user_id}")
async def unregister_callback(user_id: int):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback"""
    try:
        if user_id in payment_callbacks:
            del payment_callbacks[user_id]
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {
                "success": True,
                "message": f"Callback –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            }
        else:
            return {
                "success": False,
                "message": f"Callback –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/payment/callbacks")
async def list_callbacks():
    """–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
    return {
        "success": True,
        "callbacks": list(payment_callbacks.keys()),
        "count": len(payment_callbacks)
    }

@app.get("/payment/info")
async def get_payment_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    try:
        info = payment_system.get_integration_info()
        return {
            "success": True,
            "info": info
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def process_payments_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            await payment_system.process_payments()
            await asyncio.sleep(config.CHECK_INTERVAL)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Payment Bot API...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(process_payments_task())
    
    logger.info("‚úÖ Payment Bot API –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Payment Bot API...")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "payment_api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )





