#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Telegram –±–æ—Ç–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from payment_integration_client import PaymentBotClient

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PAYMENT_API_KEY = "U0LcNppTYxc3EO0sXIyTQQ-OKrFDVwt3qLoNto9VakI"
PAYMENT_BASE_URL = "http://localhost:8001"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payment_client = PaymentBotClient(PAYMENT_API_KEY, PAYMENT_BASE_URL)

class PaymentBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
    
    def __init__(self, application: Application):
        self.application = application
        self.payment_client = payment_client
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("pay", self.payment_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.check_payment_callback, pattern="^check_payment_"))
        self.application.add_handler(CallbackQueryHandler(self.wallet_balance_callback, pattern="^wallet_balance$"))
        self.application.add_handler(CallbackQueryHandler(self.payment_history_callback, pattern="^payment_history$"))
        self.application.add_handler(CallbackQueryHandler(self.main_menu_callback, pattern="^main_menu$"))
    
    async def payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã!**\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/pay 10.50`\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        try:
            amount = float(context.args[0])
            if amount < 1.0:
                keyboard = [
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT**",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!**\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/pay 10.50`",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = self.payment_client.create_payment(
            user_id=user_id,
            amount=amount,
            currency="USDT",
            description=f"–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.first_name}"
        )
        
        if payment.get('success'):
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment['payment_id']}")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data="wallet_balance")],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"""
üí≥ **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**

üí∞ **–°—É–º–º–∞:** {payment['amount']} {payment['currency']}
üè¶ **–ö–æ—à–µ–ª–µ–∫:** `{payment['wallet_address']}`
üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment['payment_id']}`

**üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ **{payment['amount']} {payment['currency']}** –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"** –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
3Ô∏è‚É£ –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** 
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ **—Ç–æ—á–Ω—É—é —Å—É–º–º—É**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **USDT (TRC20)**
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üîÑ **–°—Ç–∞—Ç—É—Å:** {payment['status']}
            """
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {payment.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        balance = self.payment_client.get_wallet_balance()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if balance.get('success'):
            message = f"""
üí∞ **–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞**

üíµ **–°—É–º–º–∞:** {balance['balance']} {balance['currency']}
üè¶ **–ê–¥—Ä–µ—Å:** `{balance['wallet_address']}`

üí° **–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/pay`
            """
        else:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞**

–ü—Ä–∏—á–∏–Ω–∞: {balance.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            """
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        limit = 5
        if context.args:
            try:
                limit = int(context.args[0])
                limit = min(max(limit, 1), 20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ 20
            except ValueError:
                pass
        
        history = self.payment_client.get_payment_history(user_id, limit)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if history.get('success'):
            payments = history.get('payments', [])
            
            if payments:
                message = f"üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(payments)})\n\n"
                
                for payment in payments:
                    status_emoji = "‚úÖ" if payment['status'] == 'confirmed' else "‚è≥"
                    message += f"{status_emoji} **{payment['amount']} {payment['currency']}** - {payment['status']}\n"
                    message += f"   ID: `{payment['payment_id']}`\n"
                    if payment.get('confirmed_at'):
                        message += f"   –í—Ä–µ–º—è: {payment['confirmed_at']}\n"
                    message += "\n"
            else:
                message = "üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞**\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π `/pay`"
        else:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏**

–ü—Ä–∏—á–∏–Ω–∞: {history.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            """
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def check_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        await query.answer()
        
        payment_id = query.data.split("_")[2]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
        
        status = self.payment_client.get_payment_status(payment_id)
        
        if status.get('success'):
            if status['status'] == 'confirmed':
                message = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

üí∞ **–°—É–º–º–∞:** {status['amount']} {status['currency']}
üîó **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:** `{status.get('transaction_hash', 'N/A')}`
‚è∞ **–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** {status.get('confirmed_at', 'N/A')}
üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_id}`

üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!**
                """
            elif status['status'] == 'pending':
                message = f"""
‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ**

üí∞ **–°—É–º–º–∞:** {status['amount']} {status['currency']}
üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_id}`

**–°—Ç–∞—Ç—É—Å:** {status['status']}

üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç**
                """
            else:
                message = f"""
‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞**

üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_id}`
**–°—Ç–∞—Ç—É—Å:** {status['status']}

üí° **–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**
                """
        else:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞**

üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_id}`
**–ü—Ä–∏—á–∏–Ω–∞:** {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**
            """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="wallet_balance")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def wallet_balance_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        balance = self.payment_client.get_wallet_balance()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if balance.get('success'):
            message = f"""
üí∞ **–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞**

üíµ **–°—É–º–º–∞:** {balance['balance']} {balance['currency']}
üè¶ **–ê–¥—Ä–µ—Å:** `{balance['wallet_address']}`

üí° **–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/pay`
            """
        else:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞**

–ü—Ä–∏—á–∏–Ω–∞: {balance.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            """
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def payment_history_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        history = self.payment_client.get_payment_history(user_id, 5)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if history.get('success'):
            payments = history.get('payments', [])
            
            if payments:
                message = f"üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(payments)})\n\n"
                
                for payment in payments:
                    status_emoji = "‚úÖ" if payment['status'] == 'confirmed' else "‚è≥"
                    message += f"{status_emoji} **{payment['amount']} {payment['currency']}** - {payment['status']}\n"
                    message += f"   ID: `{payment['payment_id']}`\n\n"
            else:
                message = "üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞**\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π `/pay`"
        else:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏**

–ü—Ä–∏—á–∏–Ω–∞: {history.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            """
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="create_payment")],
            [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="setup_wallet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
async def main():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    payment_integration = PaymentBotIntegration(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/pay <—Å—É–º–º–∞>` - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂\n"
            "‚Ä¢ `/balance` - –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n"
            "‚Ä¢ `/history` - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "‚Ä¢ `/help` - –ø–æ–º–æ—â—å",
            parse_mode='Markdown'
        )
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", start_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())


