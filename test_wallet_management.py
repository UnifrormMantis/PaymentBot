#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏
"""

from database import Database

def test_wallet_management():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–ê–ú–ò")
    print("=" * 50)
    
    db = Database()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 739935417
    
    print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_id}")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...")
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM user_wallets WHERE user_id = ?', (test_user_id,))
    conn.commit()
    conn.close()
    print("‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    print("\n1Ô∏è‚É£ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–û–í:")
    wallets_to_add = [
        "TTestWallet1234567890123456789012345",
        "TAnotherWallet1234567890123456789012",
        "TThirdWallet123456789012345678901234"
    ]
    
    for i, wallet_address in enumerate(wallets_to_add, 1):
        wallet_name = f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ {i}"
        db.add_user_wallet(test_user_id, wallet_address, wallet_name)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {wallet_name} ({wallet_address})")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–û–®–ï–õ–¨–ö–û–í:")
    wallets = db.get_user_wallets(test_user_id)
    print(f"   üìä –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets)}")
    
    for wallet in wallets:
        status = "üü¢ –ê–ö–¢–ò–í–ù–´–ô" if wallet['is_active'] else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        print(f"   {status} {wallet['wallet_name']} ({wallet['wallet_address']})")
    
    # –¢–µ—Å—Ç 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    print("\n3Ô∏è‚É£ –£–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê:")
    if wallets:
        first_wallet_id = wallets[0]['id']
        db.set_active_wallet(test_user_id, first_wallet_id)
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ—à–µ–ª–µ–∫: {wallets[0]['wallet_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        active_wallet = db.get_active_wallet(test_user_id)
        if active_wallet:
            print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {active_wallet['wallet_name']}")
        else:
            print("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    print("\n4Ô∏è‚É£ –£–î–ê–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê:")
    if len(wallets) > 1:
        wallet_to_delete = wallets[1]
        db.delete_user_wallet(test_user_id, wallet_to_delete['id'])
        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ—à–µ–ª–µ–∫: {wallet_to_delete['wallet_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω
        remaining_wallets = db.get_user_wallets(test_user_id)
        print(f"   üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–æ—à–µ–ª—å–∫–æ–≤: {len(remaining_wallets)}")
    
    # –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    final_wallets = db.get_user_wallets(test_user_id)
    active_wallet = db.get_active_wallet(test_user_id)
    
    print(f"   üìä –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(final_wallets)}")
    for wallet in final_wallets:
        status = "üü¢ –ê–ö–¢–ò–í–ù–´–ô" if wallet['is_active'] else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        print(f"   {status} {wallet['wallet_name']}")
    
    if active_wallet:
        print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {active_wallet['wallet_name']}")
    else:
        print("   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
    
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)

if __name__ == "__main__":
    test_wallet_management()

