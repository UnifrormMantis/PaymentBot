#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Payment Bot API –≤ –≤–∞—à –≤—Ç–æ—Ä–æ–π –±–æ—Ç
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
"""

import asyncio
import aiohttp
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class YourBotWithPayments:
    """
    –í–∞—à –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ API
    """
    
    def __init__(self, bot_token: str, payment_api_url: str = "http://localhost:8000"):
        self.bot_token = bot_token
        self.payment_api_url = payment_api_url
        self.session = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = aiohttp.ClientSession()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("pay", self.pay_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CommandHandler("setup_wallet", self.setup_wallet_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        print("ü§ñ –í–∞—à –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
        print(f"üí≥ API –ø–ª–∞—Ç–µ–∂–µ–π: {self.payment_api_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.session:
            await self.session.close()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    # API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
    async def create_payment(self, user_id: int, amount: float, description: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API"""
        try:
            async with self.session.post(
                f"{self.payment_api_url}/payment/create",
                json={
                    "user_id": user_id,
                    "amount": amount,
                    "currency": "USDT",
                    "description": description
                }
            ) as response:
                result = await response.json()
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def setup_auto_payment(self, user_id: int, wallet_address: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API"""
        try:
            async with self.session.post(
                f"{self.payment_api_url}/payment/auto",
                json={
                    "user_id": user_id,
                    "wallet_address": wallet_address,
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂"
                }
            ) as response:
                result = await response.json()
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_balance(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API"""
        try:
            async with self.session.get(
                f"{self.payment_api_url}/payment/balance/{user_id}"
            ) as response:
                result = await response.json()
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_payment_status(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ API"""
        try:
            async with self.session.get(
                f"{self.payment_api_url}/payment/status/{user_id}"
            ) as response:
                result = await response.json()
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {"success": False, "error": str(e)}
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="create_payment")],
            [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="setup_wallet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /pay - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /pay 100",
                reply_markup=reply_markup
            )
            return
        
        try:
            amount = float(context.args[0])
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /pay 100",
                reply_markup=reply_markup
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        result = await self.create_payment(
            user_id=user_id,
            amount=amount,
            description=f"–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if result['success']:
            data = result['data']
            await update.message.reply_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                f"üì± –ö–æ—à–µ–ª–µ–∫: `{data['wallet_address']}`\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {data['payment_id']}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result['error']}",
                reply_markup=reply_markup
            )
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
        user_id = update.effective_user.id
        
        result = await self.get_balance(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if result['success']:
            await update.message.reply_text(
                f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{result['wallet_address']}`\n"
                f"üíµ {result['currency']}: {result['balance']:.2f}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå {result['error']}\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /setup_wallet",
                reply_markup=reply_markup
            )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /history - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        user_id = update.effective_user.id
        
        result = await self.get_payment_status(user_id)
        
        if result['success']:
            data = result['data']
            pending = data['pending_payments']
            confirmed = data['confirmed_payments']
            
            message = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
            
            if pending:
                message += "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
                for payment in pending[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    message += f"üí∞ {payment['amount']} {payment['currency']}\n"
                message += "\n"
            
            if confirmed:
                message += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
                for payment in confirmed[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    message += f"üí∞ {payment['amount']} {payment['currency']}\n"
                    message += f"üîó `{payment['transaction_hash']}`\n"
                    message += f"üìÖ {payment['confirmed_at']}\n\n"
            else:
                message += "üì≠ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(f"‚ùå {result['error']}", reply_markup=reply_markup)
    
    async def setup_wallet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setup_wallet - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Tron –∫–æ—à–µ–ª—å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: `TYourAddress1234567890123456789012345`\n\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_wallet_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not wallet_address.startswith('T') or len(wallet_address) != 34:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞!\n\n"
                "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: TYourAddress1234567890123456789012345"
            )
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂
        result = await self.setup_auto_payment(user_id, wallet_address)
        
        if result['success']:
            await update.message.reply_text(
                f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"üì± –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
                f"ü§ñ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã!",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {result['error']}"
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "create_payment":
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay <—Å—É–º–º–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /pay 100",
                reply_markup=reply_markup
            )
        elif data == "check_balance":
            result = await self.get_balance(user_id)
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if result['success']:
                await query.edit_message_text(
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {result['balance']:.2f} {result['currency']}\n"
                    f"üì± –ö–æ—à–µ–ª–µ–∫: `{result['wallet_address']}`",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    f"‚ùå {result['error']}",
                    reply_markup=reply_markup
                )
        elif data == "payment_history":
            await self.history_command(update, context)
        elif data == "setup_wallet":
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Tron –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä: `TYourAddress1234567890123456789012345`",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif data == "main_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="create_payment")],
                [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="setup_wallet")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN"
    PAYMENT_API_URL = "http://localhost:8000"
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = YourBotWithPayments(BOT_TOKEN, PAYMENT_API_URL)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())





