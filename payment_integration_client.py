#!/usr/bin/env python3
"""
–ì–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import requests
import json
import time
from typing import Optional, Dict, Any, List
from datetime import datetime
from tron_tracker import TronTracker

class PaymentBotClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, api_key: str, base_url: str = "http://localhost:8001"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            base_url: –ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            "X-API-Key": api_key,
            "Content-Type": "application/json"
        }
        self.tron_tracker = TronTracker()
    
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=self.headers, params=params, timeout=10)
            elif method.upper() == "POST":
                response = requests.post(url, headers=self.headers, json=data, timeout=10)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            }
        except json.JSONDecodeError as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
            }
    
    def create_payment(self, user_id: int, amount: float, currency: str = "USDT", description: str = "") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        """
        data = {
            "user_id": user_id,
            "amount": amount,
            "currency": currency,
            "description": description
        }
        
        return self._make_request("POST", "/create-payment", data=data)
    
    def get_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        return self._make_request("GET", f"/check-payment/{payment_id}")
    
    def get_wallet_balance(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–∞–Ω—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ TronTracker –Ω–∞–ø—Ä—è–º—É—é
        try:
            balance = self.tron_tracker.get_balance("TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx")
            return {
                "success": True,
                "balance": balance,
                "currency": "USDT",
                "wallet_address": "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx"
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            }
    
    def get_payment_history(self, user_id: int, limit: int = 10) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
        """
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        return {
            "success": True,
            "payments": [],
            "total": 0,
            "message": "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
        }
    
    def wait_for_payment_confirmation(self, payment_id: str, timeout: int = 300, check_interval: int = 10) -> Dict[str, Any]:
        """
        –û–∂–∏–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            status = self.get_payment_status(payment_id)
            
            if not status.get("success", False):
                return status
            
            if status.get("status") == "confirmed":
                return status
            
            time.sleep(check_interval)
        
        # –¢–∞–π–º–∞—É—Ç
        return {
            "success": False,
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞",
            "payment_id": payment_id,
            "status": "timeout"
        }
    
    def get_api_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API
        """
        return self._make_request("GET", "/get-api-key")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = PaymentBotClient("7QrV9SXDydqnE_vCraPYonhW-MZy1NAFQ8Wp3_fJSGY")
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ì–û API")
    print("=" * 40)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API...")
    api_info = client.get_api_info()
    if api_info.get("success"):
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"   –ö–ª—é—á: {api_info.get('api_key', 'N/A')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {api_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞...")
    balance = client.get_wallet_balance()
    if balance.get("success"):
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å: {balance.get('balance', 0)} {balance.get('currency', 'USDT')}")
        print(f"   –ö–æ—à–µ–ª–µ–∫: {balance.get('wallet_address', 'N/A')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {balance.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    test_payment = client.create_payment(
        user_id=123456789,
        amount=1.00,
        currency="USDT",
        description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
    )
    
    if test_payment.get("success"):
        payment_id = test_payment.get("payment_id")
        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_id}")
        print(f"   –°—É–º–º–∞: {test_payment.get('amount')} {test_payment.get('currency')}")
        print(f"   –ö–æ—à–µ–ª–µ–∫: {test_payment.get('wallet_address')}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        print(f"\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}...")
        status = client.get_payment_status(payment_id)
        if status.get("success"):
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status.get('status', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {test_payment.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    print("\n" + "=" * 40)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
