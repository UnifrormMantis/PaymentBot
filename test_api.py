#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API TronGrid –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
"""

import requests
import config

def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API TronGrid"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API TRONGRID")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß API URL: {config.TRON_API_URL}")
    print(f"üîë API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config.TRON_API_KEY else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üíé USDT Contract: {config.USDT_CONTRACT_ADDRESS}")
    print()
    
    if not config.TRON_API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    headers = {
        'TRON-PRO-API-KEY': config.TRON_API_KEY
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π endpoint
    test_url = f"{config.TRON_API_URL}/v1/blocks/latest"
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: {test_url}")
    
    try:
        response = requests.get(test_url, headers=headers, timeout=10)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω!")
            data = response.json()
            print(f"üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: {data.get('block_header', {}).get('raw_data', {}).get('number', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    test_address = "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx"  # –í–∞—à –∫–æ—à–µ–ª–µ–∫
    tokens_url = f"{config.TRON_API_URL}/v1/accounts/{test_address}/tokens"
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è: {test_address}")
    print(f"üì° URL: {tokens_url}")
    
    try:
        response = requests.get(tokens_url, headers=headers, timeout=10)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Endpoint —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            data = response.json()
            tokens = data.get('data', [])
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
            
            for token in tokens:
                if token.get('contract_address') == config.USDT_CONTRACT_ADDRESS:
                    balance = float(token.get('balance', 0)) / 1000000
                    print(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {balance}")
                    break
            else:
                print("üí° USDT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_api()





