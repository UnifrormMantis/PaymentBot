#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: —Ä–æ—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
"""

import sqlite3
import time
import requests
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DATABASE_PATH = "payments.db"
API_URL = "http://localhost:8001"
API_KEY = "rsG7Hzt0EaEY5ZoEH4eE96SiY234qpiSYg5d92xrSm4"

# –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
WALLETS = [
    "TRpxhgJ9izoZ56iHJ6gkWwvuStaMeCTisS",
    "TWJ5wQPnJTk2keYXjEgf19i17ZzACBY4Mx", 
    "TPersistenceTest123456789012345678901234"
]

def get_active_wallet():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT wallet_address FROM user_wallets 
        WHERE is_active = 1 
        ORDER BY created_at DESC
        LIMIT 1
    ''')
    
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else None

def set_active_wallet(wallet_address):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏
    cursor.execute('UPDATE user_wallets SET is_active = 0')
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    cursor.execute('UPDATE user_wallets SET is_active = 1 WHERE wallet_address = ?', (wallet_address,))
    
    conn.commit()
    conn.close()
    
    print(f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ—à–µ–ª–µ–∫: {wallet_address}")

def test_api_response():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç API"""
    try:
        response = requests.post(
            f"{API_URL}/get-payment-wallet",
            headers={
                "X-API-Key": API_KEY,
                "Content-Type": "application/json"
            },
            json={"user_wallet": "TTestUser123456789"},
            timeout=5
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                return data.get('wallet_address')
            else:
                return f"‚ùå API Error: {data.get('error')}"
        else:
            return f"‚ùå HTTP Error: {response.status_code}"
            
    except Exception as e:
        return f"‚ùå Connection Error: {str(e)}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò PAYMENT BOT API")
    print("=" * 50)
    print(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%H:%M:%S')}")
    print(f"üîÑ –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥")
    print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 200 —Å–µ–∫—É–Ω–¥ (10 —Ü–∏–∫–ª–æ–≤)")
    print("=" * 50)
    
    wallet_index = 0
    test_duration = 200  # 200 —Å–µ–∫—É–Ω–¥
    rotation_interval = 20  # 20 —Å–µ–∫—É–Ω–¥
    start_time = time.time()
    
    while time.time() - start_time < test_duration:
        current_time = datetime.now().strftime('%H:%M:%S')
        elapsed = int(time.time() - start_time)
        remaining = test_duration - elapsed
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        current_wallet = WALLETS[wallet_index % len(WALLETS)]
        
        print(f"\n‚è∞ {current_time} | –ü—Ä–æ—à–ª–æ: {elapsed}s | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}s")
        print(f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫: {current_wallet}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
        set_active_wallet(current_wallet)
        
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_wallet = get_active_wallet()
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_wallet}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        api_wallet = test_api_response()
        print(f"üåê API –æ—Ç–≤–µ—Ç: {api_wallet}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if db_wallet == api_wallet:
            print("‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: OK")
        else:
            print("‚ùå –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –û–®–ò–ë–ö–ê!")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ—à–µ–ª—å–∫—É
        wallet_index += 1
        
        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
        if remaining > rotation_interval:
            print(f"‚è≥ –ñ–¥–µ–º {rotation_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏...")
            time.sleep(rotation_interval)
        else:
            print(f"‚è≥ –ñ–¥–µ–º {remaining} —Å–µ–∫—É–Ω–¥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞...")
            time.sleep(remaining)
    
    print("\n" + "=" * 50)
    print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 50)

if __name__ == "__main__":
    main()





